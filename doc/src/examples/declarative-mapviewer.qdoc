/****************************************************************************
**
** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
** All rights reserved.
** Contact: http://www.qt-project.org/
**
** This file is part of the documentation of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:FDL$
** GNU Free Documentation License
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file.
**
** Other Usage
** Alternatively, this file may be used in accordance with the terms
** and conditions contained in a signed written agreement between you
** and Nokia.
**
**
**
**
** $QT_END_LICENSE$
**
****************************************************************************/

/*!
    \example declarative/mapviewer
    \title Map Viewer (QML)
    \ingroup qtlocation-examples

    \brief The Map Viewer example shows how to display and interact with a map,
           search for an address, and find driving directions.

    This is a large example covering many basic uses of maps, positioning, and
    navigation services in QtLocation. This page is divided into sections
    covering each of these areas of functionality with snippets from the code.

    QML elements shown in this example:

    \list
    \o Displaying a map
        \list
        \o \l{QtLocation5::Map}{Map}
        \o \l{QtLocation5::MapFlickable}{MapFlickable}
        \o \l{QtLocation5::MapPinchArea}{MapPinchArea}
        \o \l{QtLocation5::Coordinate}{Coordinate}
        \endlist
    \o Finding an address
        \list
        \o \l{QtLocation5::GeocodeModel}{GeocodeModel}
        \o \l{QtLocation5::MapItemView}{MapItemView}
        \o \l{QtLocation5::MapCircle}{MapCircle}
        \endlist
    \o Directions and travel routes
        \list
        \o \l{QtLocation5::RouteModel}{RouteModel}
        \o \l{QtLocation5::MapRoute}{MapRoute}
        \endlist
    \endlist

    \image ../images/example-mapviewer.png

    \section2 Displaying a map

    Drawing a map on-screen is accomplished using the Map element, as shown
    below.

    \snippet examples/declarative/mapviewer/content/map/MapComponent.qml top
    \snippet examples/declarative/mapviewer/content/map/MapComponent.qml coord
    \snippet examples/declarative/mapviewer/content/map/MapComponent.qml end

    In this example, we give the map an initial center coordinate from a
    contained Coordinate element, with a set latitude and longitude. We also
    set the initial zoom level to 50% (halfway between the maximum and minimum).

    The calls to "pinch" and "flick" are used to enable gestures on the map.
    The flick gesture is also sometimes known as "kinetic panning", and provides
    a more intuitive feel for panning the map both on touch screens and with
    a mouse.

    As we do not specify a plugin for supplying map data, the platform default
    will be used. This is typically the "nokia" plugin, which provides data from
    Ovi Maps. Additional licensing conditions do apply to the use of this data,
    please see the documentation for further details.

    \section2 Finding an address (geocoding)

    To locate a certain address or place on the map uses a process called
    geocoding. In order to perform a geocode operation, we first need to adjust
    our Map element to be able to receive the result.

    Receiving results of geocoding is done through a GeocodeModel, which is
    typically instantiated as a property of the Map component:

    \snippet examples/declarative/mapviewer/content/map/MapComponent.qml geocodemodel0
    \snippet examples/declarative/mapviewer/content/map/MapComponent.qml geocodemodel1

    Then, to display the contents of the GeocodeModel we use a MapItemView:

    \snippet examples/declarative/mapviewer/content/map/MapComponent.qml geocodeview

    MapItemView uses an object called a "delegate" to act as a template for the
    items it creates. This can contain any map object desired, but in this case
    we show a MapCircle:

    \snippet examples/declarative/mapviewer/content/map/MapComponent.qml pointdel0
    \snippet examples/declarative/mapviewer/content/map/MapComponent.qml pointdel1

    With these three elements, we have enough to receive Geocode responses and
    display them on our Map. The final piece is to send the actual Geocode
    request.

    In this example, we have a utility component called Dialog which we use
    to display the user interface requesting geocoding parameters. You can
    create a similar component yourself using Dialog.qml in this example
    as a reference, or drive the process using any other UI you wish.

    To send a geocode request, first we create an Address element, and fill it
    in with the desired parameters. Then we set "map.geocodeModel.query" to
    the filled in Address, and call update() on the GeocodeModel.

    \snippet examples/declarative/mapviewer/mapviewer.qml geocode0
    \snippet examples/declarative/mapviewer/mapviewer.qml geocode1
    \snippet examples/declarative/mapviewer/mapviewer.qml geocode2

    \section2 Directions and travel routes

    Similar to the GeocodeModel, QtLocation also features the RouteModel element,
    which allows information about routes (e.g. driving directions) between two
    or more points, to be received and used with a Map.

    Here again, we instantiate the RouteModel as a property of our Map:

    \snippet examples/declarative/mapviewer/content/map/MapComponent.qml routemodel0
    \snippet examples/declarative/mapviewer/content/map/MapComponent.qml routemodel3

    To display the contents of a model to the user, we need a view. Once again
    we will use a MapItemView, to display the Routes as objects on the Map:

    \snippet examples/declarative/mapviewer/content/map/MapComponent.qml routeview

    To act as a template for the objects we wish the view to create, we create
    a delegate component:

    \snippet examples/declarative/mapviewer/content/map/MapComponent.qml routedelegate0
    \snippet examples/declarative/mapviewer/content/map/MapComponent.qml routedelegate1

    With the model, view and delegate now complete, the only missing component
    is some kind of control over the model to begin the Route request process.
    In the simplest case, we can fill out a Route request using two already
    available Coordinates, which we store inside the RouteDialog component:

    \snippet examples/declarative/mapviewer/mapviewer.qml routedialog0
    \snippet examples/declarative/mapviewer/mapviewer.qml routedialog1

    In the next snippet, we show how to set up the request object and instruct
    the model to update. We also instruct the map to center on the start
    coordinate for our routing request.

    \snippet examples/declarative/mapviewer/mapviewer.qml routerequest0
    \snippet examples/declarative/mapviewer/mapviewer.qml routerequest1

    This is all that is required to display a Route on the Map. However, it is
    also useful to be able to retrieve the written directions and explanation
    of the travel route. In the example, these are displayed in the pull-out
    on the left-hand side of the map. To create this pull-out's contents, we
    use a standard \l{ListModel} / \l{ListView} pair. The data in the
    ListModel is built from the routeModel's output:

    \snippet examples/declarative/mapviewer/content/map/MapComponent.qml routeinfomodel

    Inside the RouteModel, we add an
    \l{QtLocation5::RouteModel::status}{onStatusChanged} handler, which
    calls the \c{update()} function we defined on the model:

    \snippet examples/declarative/mapviewer/content/map/MapComponent.qml routemodel1
    \snippet examples/declarative/mapviewer/content/map/MapComponent.qml routemodel2

*/
