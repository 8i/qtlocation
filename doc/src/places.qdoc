/****************************************************************************
**
** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
** Contact: http://www.qt-project.org/
**
** This file is part of the documentation of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:FDL$
** GNU Free Documentation License
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file.
**
** Other Usage
** Alternatively, this file may be used in accordance with the terms
** and conditions contained in a signed written agreement between you
** and Nokia.
**
**
**
**
**
** $QT_END_LICENSE$
**
****************************************************************************/

/*!
    \page location-places-qml.html
    \title QML Places API
    \previouspage {qtlocation-qml.html}{Qt Location}

    \section1 Overview

    The Places API allows users to discover places/points of interest
    and view details about them such as address and contact information;
    some places may even have rich content such as images and reviews.
    The Places API also facilitates management of places and
    categories, allowing users to save and remove them.

    \section1 Quickstart Tutorial

    \section2 Plugin Initialization
    A \l Plugin is an abstraction for a backend.  One \l Plugin might access places from a REST server
    while another may access places from a local database.  The following instantiates a Plugin element
    by providing a name of "nokia".  The Plugin name identifies which backend to choose from.
    Note that different Plugin backends may have different nuances and behaviours, refer to
    the \l {Plugin references and parameters}{Plugin References} for these details.

    \snippet snippets/declarative/places.qml Initialize Plugin

    \section2 Searching
    Searching is accomplished via the \l PlaceSearchModel.  To instantiate a \l PlaceSearchModel we
    provide a \l Plugin and some search parameters such as a search center and search text.  The model
    can be used with a \l ListView and delegate to display the results.  A search operation
    is started by invoking the PlaceSearchModel::execute() method.

    \snippet snippets/declarative/places.qml PlaceSearchModel

    The \l PlaceSearchModel can also be used in conjuction with a MapItemView to display
    markers on a map.  The MapItemView's model is set to the search model, and for the delegate
    we use a MapQuickItem to display and position a given marker image.  A marker is shown
    for every place that was found by the search model.

    \snippet snippets/declarative/places.qml Search MapItemView

    The search model may also be used to specify whether corrections are returned.
    See the documentation for \l PlaceSearchModel for details.

    \section2 Fetching Details
    In order to save bandwidth, sometimes a backend will only return places which
    are partially populated with details.  This can be checked with the
    Place::detailsFetched property which indicates whether all availalable details
    have been fetched or not.  If not the Place::getDetails() method can be invoked.

    \snippet snippets/declarative/places.qml Place fetchDetails

    \section2 Saving/Removing a Place.
    Some backends may support saving/removing of places, this can be done by
    calling the Place::save() or Place::remove() function.  Note that in order
    to save a \l Place, a \l Plugin must be assigned to specify which backend we
    are saving to.

    \snippet snippets/declarative/places.qml Place createAndSavePlace
    \codeline
    \snippet snippets/declarative/places.qml Place removePlace

    \section2 Learn More
    The above quickstart tutorial only exhibits a subset of Places functionality.
    Refer to the \l {Places Elements} shown below for richer content such as \l {PlaceRecommendationModel} {recommendations},
    \l {ImageModel} {images}, \l {ReviewModel} {reviews} etc, as well as more indepth descriptions and explanations.

    See also the \l {Places (QML)}{QML Places Example} for a more comprehensive demonstration on how
    to use the API.

    \section1 Places Elements
    \section2 Data Elements
    \annotatedlist qml-QtLocation5-places-data

    \section2 Models
    \annotatedlist qml-QtLocation5-places-models
*/

/*!
    \page location-places-cpp.html
    \title Places (C++)
    \previouspage {Qt Location Module}{Qt Location}

    \section1 Overview

    The Places API allows users to discover places/points of interest
    and view details about them such as address and contact information;
    some places may even have rich content such as images and reviews.
    The Places API also facilitates management of places and
    categories, allowing users to save and remove them.

    \section1 Place Definition
    \input place-definition.qdocinc

    \section1 Common Operations

    \section2 Initializing a Manager
    All places functionality is facilitated by a QPlaceManager instance.  One must specify
    a QGeoServiceProvider in order to create the QPlaceManager

    \snippet snippets/places/requesthandler.h Initialize Manager

    \section2 Discovery/Search

    In order to perform a search operation we simply create a QPlaceSearchRequest
    and set the desired search parameters, such as a search term and search center.

    \snippet snippets/places/requesthandler.h Search for places cpp

    The request  is an asynchronous operation so we need a slot to handle the
    completion of the request. In the handler we check that there are no errors and that our search result
    type is a place.  If so we can then retrieve some of the core details of the
    place.  At the end of the slot, we delete the reply since they are for single use only.

    \snippet snippets/places/requesthandler.h Search for places handler cpp

    \b {Note:} Depending upon the plugin backend that was chosen, the search results may contain places
    which have further details that can be fetched on a place by place basis.  To fetch these other details
    see \l {Fetching Place Details}.

    \section3 Paging
    If the plugin supports paging, limit and offset parameters may be provided to the search request.
    \snippet snippets/places/requesthandler.h Search paging

    \section3 Corrections
    Suggested search term corrections to user input may also be returned with the search results if desired.
    A maximum number can be set in the search request.
    \snippet snippets/places/requesthandler.h Corrections
    \dots
    \dots
    \snippet snippets/places/requesthandler.h Corrections handling pt1
    \dots
    \snippet snippets/places/requesthandler.h Corrections handling pt2

    \section2 Fetching Place Details
    A place that has been returned from a search request may have more details
    that can be fetched.  The following demonstrates how to check if there
    are further details and if so how to request them.

    \snippet snippets/places/requesthandler.h Details check
    \dots
    \dots
    \snippet snippets/places/requesthandler.h Details handler cpp

    \section2 Fetching Rich Content
    Rich content such as images and reviews is retrieved through the manager and then if required assigned to a place.
    \snippet snippets/places/requesthandler.h Image request

    We can handle the content request as shown below.
    \snippet snippets/places/requesthandler.h Image handler

    It is important to note that the results in the QPlaceContentReply,
    is a QPlaceContent::Collection which is essentially a QMap<int, QPlaceContent>.  The key \c {int} in this case is the
    index of the content, and the value is the content itself.  Due to the way Content is implemented
    it is possible to convert a content type as follows
    \code
        QPlaceImage image = content; //provided that 'content' has a type QPlace::ImageType
    \endcode

    The usage of the QPlaceContent::Collection and the conversion between content and its subtypes means
    that code for handling the mechanics of paging reviews, images and editorials can be easily shared.

    \section2 Search Suggestions
    The retrieval of search term suggestions is very similar to performing a place search. A QPlaceSearchRequest
    is used just like a place search, the only difference being that the search term is set to a
    partially completed string.

    \snippet snippets/places/requesthandler.h Suggestion request
    And when the request is done, we can use the reply to show the suggestions.
    \snippet snippets/places/requesthandler.h Suggestion handler

    \section2 Recommendations
    Recommendations are suggestions for places that are similar to a specified place.
    The retrieval of recommendations is very similar to retrieving search term suggestions or
    performing a place search.

    \snippet snippets/places/requesthandler.h Recommendation
    \dots
    \dots
    \snippet snippets/places/requesthandler.h Recommendation handler

    \target Saving a place cpp
    \section2 Saving a Place
    The saving of a new place is performed as follows, we create a QPlace instance
    and populate it with information such as a name, address and coordinate.  Once
    done we can invoke QPlaceManager::savePlace() to begin a save operation.
    \snippet snippets/places/requesthandler.h Save place pt1
    \dots
    \snippet snippets/places/requesthandler.h Save place pt2

    Once a place is saved the reply contains the new id for that place.
    \snippet snippets/places/requesthandler.h Save place handler

    Note that to save an already \e existing place, the QPlace::placeId() must
    be filled in with the correct id.  Otherwise a new place will be created if empty or the
    wrong place overwritten if the id is incorrect.

    When a place is saved, the QPlaceManager may emit QPlaceManager::placedAdded() or QPlaceManager::placeUpdated()
    signals.  However whether a manager does so or not is provider specific, managers accessing places
    from a web service will typically not emit these signals while managers accessing places locally stored generally will.

    \section3 Caveats
    \input place-caveats.qdocinc

    \section3 Saving Between Managers
    When saving places between managers, there are a few things to be aware of.
    Some fields of a place such as the id, categories and icons are manager specific entities
    for example the categories in one manager may not be recognized in another.
    Therefore trying to save a place directly from one manager to another is not possible.

    The typical approach is to use the QPlaceManager::compatiblePlace() function,
    it creates a copy of a place, but only copies data that the manager supports.
    Manager specific data such as the place id is not copied over.  The new
    copy is now suitable for saving into the manager.  If the manager supports matching by alternative
    ids, an alternative id attribute is assigned to the copy (see \l {Matching places between managers})

    \snippet snippets/places/requesthandler.h Save to different manager

    \target Removing a place cpp
    \section2 Removing a Place
    The removal of a place is performed as follows:
    \snippet snippets/places/requesthandler.h Remove place
    \dots
    \dots
    \snippet snippets/places/requesthandler.h Remove place handler

    When a place is removed, the QPlaceManager may emit the QPlaceManager::placeRemoved() signal.  Whether a
    manager does so is provider specific.  Managers accessing places from a web service will typically not emit
    these signals, while managers accessing places stored locally generally will.

    \section2 Using Categories
    To use categories they must first be initialized.
    \snippet snippets/places/requesthandler.h Initialize categories
    \dots
    \dots
    \snippet snippets/places/requesthandler.h Initialize categories reply

    After the categories have been initialized we can then use these category functions.
    \list
        \li QPlaceManager::childCategories()
        \li QPlaceManager::category()
        \li QPlaceManager::parentCategoryId()
        \li QPlaceManager::childCategoryIds();
    \endlist

    To retrieve the top level categories
    we use the QPlaceManager::childCategories() function but do not provide
    a category id.

    \snippet snippets/places/requesthandler.h Top level categories

    If we did provide an id then we could retrieve a category's children.

    \snippet snippets/places/requesthandler.h Child categories

    \section2 Saving a Category
    The following shows how to save a category
    \snippet snippets/places/requesthandler.h Save category
    \dots
    \dots
    \snippet snippets/places/requesthandler.h Save category handler

    When a category is saved, the QPlaceManager may emit QPlaceManager::categoryAdded() or QPlaceManager::categoryUpdated()
    signals.  However whether a manager does so or not is provider specific, managers accessing places
    from a web service will typically not emit these signals while managers accessing places locally stored generally will.


    \section2 Removing a Category
    Category removal is very similar to removing a place
    \snippet snippets/places/requesthandler.h Remove category
    \dots
    \dots
    \snippet snippets/places/requesthandler.h Remove category handler

    When a category is removed, the QPlaceManager may emit the QPlaceManager::categoryRemoved() signal.  Whether a
    manager does so is provider specific.  Managers accessing places from a web service will typically not emit
    these signals, while managers accessing places stored locally generally will.

    \section2 Matching Places Between Managers
    Sometimes you may want to cross reference whether places from one manager match those from another manager.
    Such a situation may arise where one manager provides read-only access to places (origin manager) while another second r/w
    manager (destination manager) is used to save selected favorites from the first. During a search
    of the origin manager we may want to know which ones have been 'favorited' into the destination manager and perhaps display
    a customized favorite name rather than the original name.

    The matching mechanism can vary between managers, but is typically accomplished through an alternative id.
    As part of the save process, the place id from the origin manager is saved as an alternative id attribute in the destination manager
    (which can have it's own place id scheme).  In the following example, the origin manager is from the 'nokia' QGeoServiceProider, therefore
    as part of the saving process an alternative id attribute, x_id_nokia, is set for the place saved into the destination manager
    (when QPlaceManager::compatiblePlace() is called)

    \input place-crossref.qdocinc

    In order to perform the matching, we create a QPlaceMatchRequest and assign it the search results from the origin manager.
    The QPlaceMatchRequest will be used on the destination manager to return corresponding places.  We also specify
    matching parameters which are key value pairs.  As mentioned previously, this can vary depending on the manager but typically
    the key is QPlaceMatchRequest::AlternativeId to indicate we are matching by alternative id, the value in this case would be
    x_id_nokia which specifies which alternative id attribute we are using to do the matching.

    \snippet snippets/places/requesthandler.h Match places
    \dots
    \dots
    \snippet snippets/places/requesthandler.h Match places handler

    \section1 Classes in Places

    \section2 Data Classes
    \annotatedlist QtLocation-places-data

    \section2 Request Classes
    \annotatedlist QtLocation-places-requests

    \target Places Reply Classes
    \section2 Reply classes
    \annotatedlist QtLocation-places-replies

    \section2 Manager Classes
    \annotatedlist QtLocation-places-manager
*/

