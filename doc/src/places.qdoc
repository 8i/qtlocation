/****************************************************************************
**
** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies).
** All rights reserved.
** Contact: Nokia Corporation (qt-info@nokia.com)
**
** This file is part of the documentation of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:FDL$
** GNU Free Documentation License
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file.
**
** Other Usage
** Alternatively, this file may be used in accordance with the terms
** and conditions contained in a signed written agreement between you
** and Nokia.
**
**
**
**
** $QT_END_LICENSE$
**
****************************************************************************/


/*!
    \page location-places.html
    \title Places
    \previouspage {qtlocation-cpp.html}{QtLocation}

    \brief Places enables places of interest to be identified and retrieved by
    position and metadata.

    \section1 Overview

    The Places API allows users to discover places, view rich content about the places
    as reviews and images.  It can also be used to facilitated management
    of places such as saving and removing.

    \section1 Place Definition
    A place is a point of interest whether it be a favorite restaurant, a park or someone's home.
    A QPlace object describes a place by acting as a container for various information.  The information can
    be divided into 3 classifications

    \list
    \o Core data
    \o Detailed data
    \o Rich content
    \endlist

    The \e {Core} data consists of the bare essential information regarding a place.  What comes under core
    may vary from provider to provider but typically it would consist of the place name, location, contact information,
    categories and icon.  When searching for places with an online provider, it is typical that of the candidate places
    returned only the core data is populated to save bandwidth.  If a user is interested in a particular place, then
    the details of that data are retrieved.

    The \e {Detailed} data consists of the remaining place data fields like the supplier and attributes, but with
    the exception of rich content as described below.  For offline providers the details are usually all available,
    so when a search operation is conducted, the places contain detailed information.  To check whether a place does
    contain detailed information the QPlace::detailsFetched() function can be queried.  The QPlaceManager::getPlaceDetails()
    function can be used to fetch the details if necessary.

    The \e {Rich Content} consists of media type information such as images and reviews.  These are typically paginated
    and thus are retrieved independently from the place using the QPlaceManager.  \e {Rich Content} can then be assigned
    to a place instance as necessary so it can act as a container for the content.

    \section1 Common Operations

    \section2 Initializing a manager
    All places functionality is facilitated by a QPlaceManager instance.  One must specify
    a QGeoServiceProvider in order to create the QPlaceManager

    \snippet snippets/places/requesthandler.h Initialize Manager

    \section2 Discovery/Search

    In order to perform a search operation we simply create a QPlaceSearchRequest
    and set the desired search parameters, such as a search term and search center.

    \snippet snippets/places/requesthandler.h Search for places cpp

    The request  is an asynchronous operation so we need a slot to handle the
    completion of the request. In the handler we check that there are no errors and that our search result
    type is a place.  If so we can then retrieve some of the core details of the
    place.  At the end of the slot, we delete the reply since they are for single use only.

    \snippet snippets/places/requesthandler.h Search for places handler cpp

    \bold {Note:} Depending upon the plugin backend that was chosen the search results may contain places
    that are only populated with \e {core} details such as name, address, and location only.  The specifics
    depend on the plugin implementation.  To fetch the other place details see \l {Fetching Place Details}.

    \section3 Paging
    If the plugin supports paging, limit and offset parameters may be provided to the search request.
    \snippet snippets/places/requesthandler.h Search paging

    \section3 Corrections
    Suggested search term corrections to user input may also be returned with the search results if desired.
    A maximum number can be set in the search request.
    \snippet snippets/places/requesthandler.h Corrections
    \dots
    \dots
    \snippet snippets/places/requesthandler.h Corrections handling pt1
    \dots
    \snippet snippets/places/requesthandler.h Corrections handling pt2

    \section2 Fetching Place Details
    Depending upon the plugin, the place results returned during a search may only contain core data.
    We can check if the details have already been retrieved and if not, request them as shown:
    \snippet snippets/places/requesthandler.h Details check
    \dots
    \dots
    \snippet snippets/places/requesthandler.h Details handler cpp

    \section2 Fetching Rich Content
    Rich content such as images and reviews is retrieved through the manager and then if required assigned to a place.
    \snippet snippets/places/requesthandler.h Image request

    We can handle the content request as shown below.
    \snippet snippets/places/requesthandler.h Image handler

    It is important to note that the results in the QPlaceContentReply,
    is a QPlaceContent::Collection which is essentially a QMap<int, QPlaceContent>.  The key \c {int} in this case is the
    index of the content, and the value is the content itself.  Due to the way Content is implemented
    it is possible to convert a content type as follows
    \code
        QPlaceImage image = content; //provided that 'content' has a type QPlace::ImageType
    \endcode

    The usage of the QPlaceContent::Collection and the conversion between content and its subtypes means
    that code for handling the mechanics of paging reviews, images and editorials can be easily shared.

    \section2 Text Prediction
    The retrieval of text predictions is very similar to performing a place search. A QPlaceSearchRequest
    is used just like a place search, the only difference being that the search term is set to a
    semi-completed string.

    \snippet snippets/places/requesthandler.h Prediction request
    And when the request is done, we can use the reply to show the predictions.
    \snippet snippets/places/requesthandler.h Prediction handler

    \section2 Saving a place
    The saving of a new place is performed as follows, we create a QPlace instance
    and populate it with information such as a name, address and coordinate.  Once
    done we can invoke QPlaceManager::savePlace() to begin a save operation.
    \snippet snippets/places/requesthandler.h Save place pt1
    \dots
    \snippet snippets/places/requesthandler.h Save place pt2

    Once a place is saved the reply contains the new id for that place.
    \snippet snippets/places/requesthandler.h Save place handler

    Note that to save an already \e existing place, the QPlace::placeId() must
    be filled in with the correct id.  Otherwise a new place will be created if empty or the
    wrong place overwritten if the id is incorrect.

    When a place is saved, the QPlaceManager may emit QPlaceManager::placedAdded() or QPlaceManager::placeUpdated()
    signals.  However whether a manager does so or not is provider specific, managers accessing places
    from a web service will typically not emit these signals while managers accessing places locally stored generally will.

    \section3 Caveats
    The Places API is currently designed for only saving \a {core} data.  Saving a place with \e {rich content}
    or \a {detailed} data is not a supported use case.  Typically a manager will generally ignore these fields upon save and may
    produce a warning message if they are populated.

    \section2 Removing a place
    The removal of a place is performed as follows:
    \snippet snippets/places/requesthandler.h Remove place
    \dots
    \dots
    \snippet snippets/places/requesthandler.h Remove place handler

    When a place is removed, the QPlaceManager may emit the QPlaceManager::placeRemoved() signal.  Whether a
    manager does so is provider specific.  Managers accessing places from a web service will typically not emit
    these signals, while managers accessing places stored locally generally will.

    \section2 Using Categories
    To use categories they must first be initialized.
    \snippet snippets/places/requesthandler.h Initialize categories
    \dots
    \dots
    \snippet snippets/places/requesthandler.h Initialize categories reply

    After the categories have been initialized we can then use these category functions.
    \list
        \o QPlaceManager::childCategories()
        \o QPlaceManager::category()
        \o QPlaceManager::parentCategoryId()
        \o QPlaceManager::childrenCategoryIds();
    \endlist

    To retrieve the top level categories
    we use the QPlaceManager::childCategories() function but do not provide
    a category id.

    \snippet snippets/places/requesthandler.h Top level categories

    If we did provide an id then we could retrieve a category's children.

    \snippet snippets/places/requesthandler.h Child categories

    \section2 Saving a category
    The following shows how to save a category
    \snippet snippets/places/requesthandler.h Save category
    \dots
    \dots
    \snippet snippets/places/requesthandler.h Save category handler

    When a category is saved, the QPlaceManager may emit QPlaceManager::categoryAdded() or QPlaceManager::categoryUpdated()
    signals.  However whether a manager does so or not is provider specific, managers accessing places
    from a web service will typically not emit these signals while managers accessing places locally stored generally will.


    \section2 Removing a category
    Category removal is very similar to removing a place
    \snippet snippets/places/requesthandler.h Remove category
    \dots
    \dots
    \snippet snippets/places/requesthandler.h Remove category handler

    When a category is removed, the QPlaceManager may emit the QPlaceManager::categoryRemoved() signal.  Whether a
    manager does so is provider specific.  Managers accessing places from a web service will typically not emit
    these signals, while managers accessing places stored locally generally will.

    \section1 Places Examples


    \section1 Classes in Places

    \annotatedlist QtLocation-places
*/

