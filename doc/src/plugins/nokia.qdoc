/****************************************************************************
**
** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
** Contact: http://www.qt-project.org/
**
** This file is part of the documentation of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:FDL$
** GNU Free Documentation License
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file.
**
** Other Usage
** Alternatively, this file may be used in accordance with the terms
** and conditions contained in a signed written agreement between you
** and Nokia.
**
**
**
**
**
** $QT_END_LICENSE$
**
****************************************************************************/

/*!
\page location-plugin-nokia.html
\title QtLocation Nokia plugin
\previouspage {QtLocation Module}
\ingroup QtLocation-plugins

\brief Uses the relevant Nokia services provided by Nokia.

\section1 Overview

Included with the QtLocation is a Maps and Navigation API plugin which accesses the relevant Ovi
services provided by Nokia.  The use of these services is governed by the terms and conditions
available in the file plugins/geoservices/nokia/OVI_SERVICES_TERMS_AND_CONDITIONS.txt.

The Ovi services plugin can be loaded by using the plugin key "nokia".

Note that accepting the terms and conditions only applies those terms and conditions to the use of
the Ovi Maps Services plugin and does not limit the use of the other maps and navigation API
plugins that may be included with Qt.

The online plugin uses the tiled map classes, which cache tile data in heap memory (currently up to
10 MB).

\section1 Parameters

The following table lists optional parameters that can be passed to the Nokia plugin.
\table
\header
    \o Parameter
    \o Description
\row
    \o mapping.proxy
    \o Proxy server URL used by mapping manager.
\row
    \o mapping.host
    \o Map tile service URL used by mapping manager.
\row
    \o mapping.referer
    \o Referer for the mapping token used for authentication by mapping manager.
\row
    \o mapping.token
    \o Client token for the service used for authentication by mapping manager.
\row
    \o mapping.cache.directory
    \o Map tile cache directory used as network disk cache.

    Default place for the cache is "maptiles" directory in system temp.

    Map tile caching is disabled on Maemo, Meego and Windows CE platforms. Using the parameter on
    these platforms will have no effect.

    Map tiles will expire and are refetched 14 days after download.
\row
    \o mapping.cache.size
    \o Map tile cache size. Maximum size of the cache is 50MB.
\row
    \o routing.proxy
    \o Proxy server URL used by routing manager.
\row
    \o routing.host
    \o Routing service URL used by routing manager.
\row
    \o routing.referer
    \o Referer for the routing token used for authentication by routing manager.
\row
    \o routing.token
    \o Client token for the service used for authentication by routing manager.
\row
    \o places.proxy
    \o Proxy server URL used by search manager.
\row
    \o places.host
    \o Search service URL used by search manager.
\row
    \o places.api_version
    \o Version of the REST API used by the places manager.  Currently versions 1 and 2 are
       supported.  The default is version 1.
\endtable

\section1 Parameter Usage Example

The following two examples show how to create a Nokia plugin instance with
a proxy server set for use with routing, and a routing token unique to the
application.

\section2 QML

\code
Plugin {
    name: "nokia"
    PluginParameter { name: "routing.proxy"; value: "http://127.0.0.1:8080" }
    PluginParameter { name: "routing.token"; value: "abcdefg12345" }
}
\endcode

\section2 C++

\code
QMap<QString,QVariant> params;
params["routing.proxy"] = "http://127.0.0.1:8080";
params["routing.token"] = "abcdefg12345";

QGeoServiceProvider *gsp = new QGeoServiceProvider("nokia", params);
\endcode

\section1 Places
The Nokia provider remotely accesses places (read-only) from a REST based server.  The specific capabilities
and behaviours are outlined below:

\section2 Capabilities
\table
    \row
        \o Storage
        \o remote
    \row
        \o Read/Write
        \o read-only
    \row
        \o Icons
        \o No
    \row
        \o Search term suggestions
        \o yes
    \row
        \o Recommendations
        \o yes
    \row
        \o Category structure
        \o Hierarchical
    \row
        \o (Rich) Content images
        \o yes
    \row
        \o (Rich) Content reviews
        \o yes
    \row
        \o (Rich) Content editorials
        \o yes
    \row
        \o All details fetched during search
        \o no
    \row
        \o Paging offset index
        \o no
    \row
        \o Paging limit
        \o yes
    \row
        \o Distance relevance hint
        \o no
    \row
        \o Lexical name relevance hint
        \o no
    \row
        \o Search term corrections
        \o no
    \row
        \o Extended Attributes
        \o no
    \row
        \o Notifications for added/removed places/categories
        \o no
    \row
        \o visibility scopes
        \o public
    \row
        \o favorites matching/(usable as favoritesPlugin)
        \o no
\endtable

\section2 Plugin specific behaviours
\section3 Search
The following list shows what core place data is returned during a place search:
\list
\o name
\o location
\o contact information
\o attribution
\o categories
\o rating
\o visibility
\endlist

The following list shows further details that may be retrieved
via QPlaceManager::getDetails()
\list
\o supplier
\o extended attributes
\endlist

\section3 Addresses vs POIs
Sometimes a search will return a Place without a placeId, which indicates that the place is simply an 'address'
that has matched the user's search query.  An 'address' only has location and name properties.

If a Place has a placeId, then it is a specific 'point of interest', which may have some
or all Place properties available.

\section3 Search term suggestions.
Only a partial search term and search center is supported when retrieving suggestions.

\section3 Recommendation
Only a given place is supported as a parameter for a recommendation.  No other parameters are used.
*/
