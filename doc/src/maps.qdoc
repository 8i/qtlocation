/****************************************************************************
**
** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
** Contact: http://www.qt-project.org/
**
** This file is part of the documentation of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:FDL$
** GNU Free Documentation License
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file.
**
** Other Usage
** Alternatively, this file may be used in accordance with the terms
** and conditions contained in a signed written agreement between you
** and Nokia.
**
**
**
**
**
** $QT_END_LICENSE$
**
****************************************************************************/


/*!
\page location-maps-qml.html
\title Maps & Navigation (QML)
\previouspage {qtlocation-module.html}{QtLocation}

\brief Provides QtQuick user interfaces for displaying, navigating and
       interacting with maps, as well as geocoding and navigation.

\bold{Maps & Navigation} provides QtQuick user interface elements for
displaying geographic information on a map, as well as allowing user
interaction with map objects and the display itself. It also contains
utilities for geocoding (finding a geographic coordinate from a street
address) and navigation (including driving and walking directions).

It builds upon the API concepts and elements in the
\l{qtlocation-positioning-qml.html}{QML Positioning API}.

\section1 Maps

\section2 Displaying maps

Displaying a map is done using the \l{QtLocation5::Map}{Map} QML element,
which comes provided with many basic interaction utilities including the
\l{QtLocation5::MapFlickable}{MapFlickable} and
\l{QtLocation5::MapPinchArea}{MapPinchArea}. The Map element draws the map
on-screen using OpenGL (ES), allowing for hardware-accelerated rendering where
available.

\bold{Key elements}
\table
    \row
        \o \l{QtLocation5::Plugin}{Plugin}
        \o A plugin element is necessary before creating a Map.
    \row
        \o \l{QtLocation5::Map}{Map}
        \o QtQuick item to display a map on-screen
    \row
        \o \l{QtLocation5::MapFlickable}{MapFlickable}
        \o Interaction helper for the "flick" panning gesture on a Map.
    \row
        \o \l{QtLocation5::MapPinchArea}{MapPinchArea}
        \o Interaction helper for the "pinch to zoom" gesture on a Map.
\endtable

\section2 Putting objects on a Map

Maps can also contain map objects, which are used to display information on
its surface. There is a set of basic pre-defined map objects, as well as the
ability to implement custom objects using the
\l{QtLocation5::MapQuickItem}{MapQuickItem} element, which can contain any
standard QtQuick item.

\bold{Key elements}
\table
    \row
        \o \l{QtLocation5::MapCircle}{MapCircle}
        \o Geographic circle (all points at a set distance from a center), optionally with a border.
    \row
        \o \l{QtLocation5::MapRectangle}{MapRectangle}
        \o Rectangle in lat/lon space, optional border
    \row
        \o \l{QtLocation5::MapPolygon}{MapPolygon}
        \o Polygon made of an arbitrary list of \l{QtLocation5::Coordinate}{Coordinate} elements
    \row
        \o \l{QtLocation5::MapPolyline}{MapPolyline}
        \o Polyline made of an arbitrary list of \l{QtLocation5::Coordinate}{Coordinate} elements
\endtable
\table
    \row
        \o \l{QtLocation5::MapQuickItem}{MapQuickItem}
        \o Turns any arbitrary QtQuick Item into a map object.
\endtable

\section2 Model-view design with Map objects

To automatically generate Map objects based on the contents of a QtQuick
model (eg a ListModel item), the \l{QtLocation5::MapItemView}{MapItemView}
element is available. It accepts any Map object as its delegate, and can
only be created within a \l{QtLocation5::Map}{Map}.

\bold{Key elements}
\table
    \row
        \o \l{QtLocation5::MapItemView}{MapItemView}
        \o Populates a Map with Map objects based on a model.
\endtable

\section2 Interaction with Map objects

Interaction with the pre-defined Map objects is done using the
\l{QtLocation5::MapMouseArea}{MapMouseArea} element, which behaves much like a
normal QtQuick MouseArea. MapQuickItems can also contain MapMouseArea elements,
but can additionally use normal QtQuick MouseAreas to provide interaction.

Properties of Map objects that influence their appearance on the display can
be changed at any time, and many can also be used in animations. Animating
coordinate-based map objects, such as MapPolygon and MapPolyline, is not yet
available.

\bold{Key elements}
\table
    \row
        \o \l{QtLocation5::MapMouseArea}{MapMouseArea}
        \o Accepts mouse events for a pre-defined Map object (eg MapCircle)
    \row
        \o \l{QtLocation5::MapMouseEvent}{MapMouseEvent}
        \o Provides additional information unique to mouse events on a Map.
\endtable

\section1 Geocoding -- address to coordinate and vice versa

A geocoding query in QML is performed using the
\l{QtLocation5::GeocodeModel}{GeocodeModel} element. For an address-to-coordinate
query, its \c{query} property may be set to either an
\l{QtLocation5::Address}{Address} element or a string containing the textual
form of the address to search for. To perform the reverse, the same property
can be set to a Coordinate instead. Results are made available in the contents
of the model.

\bold{Key elements}
\table
    \row
        \o \l{QtLocation5::Plugin}{Plugin}
        \o A Plugin element is necessary before creating a GeocodeModel
    \row
        \o \l{QtLocation5::GeocodeModel}{GeocodeModel}
        \o Performs geocoding queries and gives results as a model
    \row
        \o \l{QtLocation5::Address}{Address}
        \o Structured address for use in queries and results of geocoding
\endtable

\section1 Routing and navigation

*/


/*!
\page location-maps-cpp.html
\title Maps & Navigation (C++)
\previouspage {qtlocation-module.html}{QtLocation}

\brief Provides C++ classes for Geocoding and Navigation.

\bold{Maps & Navigation} provides C++ utilities for geocoding (finding a
geographic coordinate from a street address) and navigation (including driving
and walking directions).

\section1 Geocoding

In C++, an address-to-coordinate query is performed using the
\l{QGeocodingManager::geocode()}{geocode()} method of the QGeocodingManager
class. For coordinate-to-address queries, the
\l{QGeocodingManager::reverseGeocode()}{reverseGeocode()} method is available
on the same class. Instances of QGeocodingManager are available via
\l{QGeoServiceProvider}.

\bold{Key classes}
\table
    \row
        \o \l{QGeoServiceProvider}
        \o Provides a QGeocodingManager instance ready for use
    \row
        \o \l{QGeocodingManager}
        \o Accepts queries and produces QGeocodeReply objects
    \row
        \o \l{QGeocodeReply}
        \o Contains the results of a geocoding query
\endtable
*/
