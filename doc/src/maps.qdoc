/****************************************************************************
**
** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
** Contact: http://www.qt-project.org/
**
** This file is part of the documentation of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:FDL$
** GNU Free Documentation License
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file.
**
** Other Usage
** Alternatively, this file may be used in accordance with the terms
** and conditions contained in a signed written agreement between you
** and Nokia.
**
**
**
**
**
** $QT_END_LICENSE$
**
****************************************************************************/


/*!
\page location-maps-qml.html
\title Maps and Navigation (QML)
\previouspage {Qt Location Module}{Qt Location}

\brief Provides QtQuick user interfaces for displaying, navigating and
       interacting with maps, as well as geocoding and navigation.

\b{Maps and Navigation} provides QtQuick user interface elements for
displaying geographic information on a map, as well as allowing user
interaction with map overlay objects and the display itself. It also
contains utilities for geocoding (finding a geographic coordinate from a
street address) and navigation (including driving and walking directions).

It builds upon the API concepts and elements in the
\l{qtlocation-positioning-qml.html}{QML Positioning API}.

\section1 Maps

\section2 Displaying Maps

Displaying a map is done using the \l{QtLocation5::Map}{Map} QML element.
The Map element supports user interaction through the
\l{QtLocation5::MapFlickable}{MapFlickable} and
\l{QtLocation5::MapPinchArea}{MapPinchArea} QML elements. The Map element
draws the map on-screen using OpenGL (ES), allowing for hardware-accelerated
rendering where available.

\b{Key elements}
\table
    \row
        \li \l{QtLocation5::Plugin}{Plugin}
        \li A location-based services plugin provides data including map data which is then displayed in a Map element.
    \row
        \li \l{QtLocation5::Map}{Map}
        \li QtQuick item to display a map on-screen.
    \row
        \li \l{QtLocation5::MapFlickable}{MapFlickable}
        \li Interaction helper for the "flick" panning gesture on a Map.
    \row
        \li \l{QtLocation5::MapPinchArea}{MapPinchArea}
        \li Interaction helper for the "pinch to zoom" gesture on a Map.
\endtable

Note that the client must create a \l{QtLocation5::Plugin}{Plugin} element
prior to using a \l{QtLocation5::Map}{Map} element in order to have access
to map data to display.

\section2 Putting Objects on a Map (Map Overlay Objects)

Maps can also contain map overlay objects, which are used to display information
on its surface. There is a set of basic pre-defined map overlay objects, as well
as the ability to implement custom map overlay objects using the
\l{QtLocation5::MapQuickItem}{MapQuickItem} element, which can contain any
standard QtQuick item.

\b{Key elements}
\table
    \row
        \li \l{QtLocation5::MapCircle}{MapCircle}
        \li A geographic circle (all points at a set distance from a center), optionally with a border.
    \row
        \li \l{QtLocation5::MapRectangle}{MapRectangle}
        \li A rectangle whose top left and bottom right points are specified as Coordinate elements, optionally with a border.
    \row
        \li \l{QtLocation5::MapPolygon}{MapPolygon}
        \li A polygon made of an arbitrary list of \l{QtLocation5::Coordinate}{Coordinate} elements.
    \row
        \li \l{QtLocation5::MapPolyline}{MapPolyline}
        \li A polyline made of an arbitrary list of \l{QtLocation5::Coordinate}{Coordinate} elements.
    \row
        \li \l{QtLocation5::MapQuickItem}{MapQuickItem}
        \li Turns any arbitrary QtQuick Item into a map overlay object.  MapQuickItem is an enabler for specifying custom map overlay objects.
\endtable

\section2 Model-View Design with Map Overlay Objects

To automatically generate map overlay objects based on the contents of a QtQuick
model (for example a ListModel item), the \l{QtLocation5::MapItemView}{MapItemView}
element is available. It accepts any map overlay object as its delegate, and can
only be created within a \l{QtLocation5::Map}{Map}.

\b{Key elements}
\table
    \row
        \li \l{QtLocation5::MapItemView}{MapItemView}
        \li Populates a Map with map overlay objects based on the data provided by a model.
\endtable

\section2 Interaction with Map Overlay Objects

Interaction with the pre-defined map overlay object types is done using the
\l{QtLocation5::MapMouseArea}{MapMouseArea} element, which behaves much like a
normal QtQuick MouseArea. MapQuickItems can also contain MapMouseArea elements,
but can additionally use normal QtQuick MouseAreas to provide interaction.

Properties of map overlay objects that influence their appearance on the display can
be changed at any time, and many can also be used in animations. Animating
coordinate-based map overlay objects, such as MapPolygon and MapPolyline, is not yet
available.

\b{Key elements}
\table
    \row
        \li \l{QtLocation5::MapMouseArea}{MapMouseArea}
        \li Accepts mouse events for a pre-defined map overlay object (for example MapCircle).
    \row
        \li \l{QtLocation5::MapMouseEvent}{MapMouseEvent}
        \li Provides additional information unique to mouse events on a Map.
\endtable

\section1 Geocoding -- Address to Coordinate and Vice Versa

Geocoding is the translation of geographic coordinates into addresses, or vice
versa.  Such a translation usually involves sending the source data to a server
which then performs the translation and returns the results, although some
location-based service provider \l{QtLocation5::Plugin}{plugins} may be able to
provide some geocoding functionality without sending data to a remote server.
The availability and accuracy of the translation usually depends on the location
or address being translated, as different areas of the Earth are mapped to
varying degrees of accuracy.

A geocoding query in QML is performed using the
\l{QtLocation5::GeocodeModel}{GeocodeModel} element. For an address-to-coordinate
query, its \c{query} property may be set to either an
\l{QtLocation5::Address}{Address} element or a string containing the textual
form of the address to search for. To perform the reverse, the same property
can be set to a Coordinate instead. Results are made available in the contents
of the model.

\b{Key elements}
\table
    \row
        \li \l{QtLocation5::Plugin}{Plugin}
        \li A location-based services plugin provides data including geocoding translation results which are exposed to clients via a GeocodeModel.
    \row
        \li \l{QtLocation5::GeocodeModel}{GeocodeModel}
        \li Queries the Plugin for geocoding translations and provides access to results via indexes in the model.
    \row
        \li \l{QtLocation5::Address}{Address}
        \li Structured address for use in queries and results of geocoding.
\endtable

Note that the client must create a \l{QtLocation5::Plugin}{Plugin} element
prior to using a \l{QtLocation5::GeocodeModel}{GeocodeModel} element in order
to have access to geocoding translation services and thus data to display.

\section1 Routing and Navigation

*/


/*!
\page location-maps-cpp.html
\title Maps and Navigation (C++)
\previouspage {Qt Location Module}{Qt Location}

\brief Provides C++ classes for Geocoding and Navigation.

\b{Maps and Navigation} provides C++ utilities for geocoding (finding a
geographic coordinate from a street address) and navigation (including driving
and walking directions).

\section1 Geocoding

In C++, an address-to-coordinate query is performed using the
\l{QGeocodingManager::geocode()}{geocode()} method of the QGeocodingManager
class. For coordinate-to-address queries, the
\l{QGeocodingManager::reverseGeocode()}{reverseGeocode()} method is available
on the same class. Instances of QGeocodingManager are available via
\l{QGeoServiceProvider}.

\b{Key classes}
\table
    \row
        \li \l{QGeoServiceProvider}
        \li Provides a QGeocodingManager instance ready for use.
    \row
        \li \l{QGeocodingManager}
        \li Accepts queries and produces QGeocodeReply objects.
    \row
        \li \l{QGeocodeReply}
        \li Contains the results of a geocoding query.
\endtable
*/
