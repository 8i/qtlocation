/****************************************************************************
**
** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
** Contact: http://www.qt-project.org/
**
** This file is part of the test suite of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:LGPL$
** GNU Lesser General Public License Usage
** This file may be used under the terms of the GNU Lesser General Public
** License version 2.1 as published by the Free Software Foundation and
** appearing in the file LICENSE.LGPL included in the packaging of this
** file. Please review the following information to ensure the GNU Lesser
** General Public License version 2.1 requirements will be met:
** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
**
** In addition, as a special exception, Nokia gives you certain additional
** rights. These rights are described in the Nokia Qt LGPL Exception
** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
**
** GNU General Public License Usage
** Alternatively, this file may be used under the terms of the GNU General
** Public License version 3.0 as published by the Free Software Foundation
** and appearing in the file LICENSE.GPL included in the packaging of this
** file. Please review the following information to ensure the GNU General
** Public License version 3.0 requirements will be met:
** http://www.gnu.org/copyleft/gpl.html.
**
** Other Usage
** Alternatively, this file may be used in accordance with the terms and
** conditions contained in a signed written agreement between you and Nokia.
**
**
**
**
**
**
** $QT_END_LICENSE$
**
****************************************************************************/

//TESTED_COMPONENT=src/location

testcase = {

    qml_searching_for_places_by_category_for_given_position_data: {
        data:["48.9", "2.4", "Shopping", "Pharmacy", "http://where.desktop.mos.svc.ovi.com/NOSe/json?vi=places&dv=oviMaps&lat=48.9&lon=2.4&ta=9000049&of=0&dym=5",
              "http://where.desktop.mos.svc.ovi.com/NOSe/json?vi=places&dv=oviMaps&lat=48.9&lon=2.4&ta=9000270&of=0&dym=5"]
    },

    qml_searching_for_places_by_category_for_given_position: function(latitude, longitude, category, subcategory, url1, url2)
    {
        // Test meta data
        testTitle = "QML: Places - Searching by category for the given position";
        testBinary = "qml_location_places";
        testSource = "$QTDIR/qtlocation/examples/declarative/places"
        testGoal = "Verify that places can be found.";
        testPreconditions = "Internet connection is required for this test case. Pass proxy settings to app if needed '--plugin.places.proxy http://172.16.9.165:8080/'";
        testGroups = "BAT,5.0";
        testRequirements = "MTMW-190: Place Discovery";

        // Test steps
        prompt(twiki("---+++ " + testTitle + "<br><br>
        *Goal:* " + testGoal + "<br>
        *Pre-Requisites:* " + testPreconditions + "<br>
        *Tested Binary:* " + testBinary + "<br>
        *Requirements:* " + testRequirements + "<br>

        | *Step* | *Verification* |
        | Open " + url1 + " url in a desktop browser | |
        | Launch " + testBinary + " | App launches normally |
        | Select Provider button | |
        | Select nokia provider | |
        | Select Search button | |
        | Select Search Center button | |
        | Fill in " + latitude + " in Latitude field | |
        | Fill in " + longitude + " in Longitude field | |
        | Select Go! button | |
        | Select Categories button | |
        | Select Right arrow next to " + category + " | |
        | Select " + subcategory + " | |
        | Expand panel with seacrh results | Verify that number of found places corresponds to the open web page. Verify that details of the first place is the same. |
        | Hide panel with results | |
        | Open " + url2 + " url in a desktop browser | |
        | Select Categories button | |
        | Select Back button | |
        | Select " + category + " | |
        | Expand panel with seacrh result | Verify that number of found places corresponds to the open web page. Verify that details of the first place is the same. |"
        ));
    },

    qml_searching_for_places_by_text_string_for_given_position_data: {
        search_string:["48.9", "2.4", "pizza", "http://where.desktop.mos.svc.ovi.com/NOSe/json?vi=where&dv=oviMaps&lat=48.9&lon=2.4&of=0&dym=5&q=pizza"],
        search_string_with_typo:["-27.5", "153", "pizzs", "http://where.desktop.mos.svc.ovi.com/NOSe/json?vi=where&dv=oviMaps&lat=-27.5&lon=153&of=0&dym=5&q=pizzs"]
    },

    qml_searching_for_places_by_text_string_for_given_position: function(latitude, longitude, search_string, url)
    {
        // Test meta data
        testTitle = "QML: Places - Searching by text string for the given position";
        testBinary = "qml_location_places";
        testSource = "$QTDIR/qtlocation/examples/declarative/places"
        testGoal = "Verify that places can be found or user is informed about the error.";
        testPreconditions = "Internet connection is required for this test case. Pass proxy settings to app if needed '--plugin.places.proxy http://172.16.9.165:8080/'";
        testGroups = "BAT,5.0";
        testRequirements = "MTMW-190: Place Discovery";

        // Test steps
        prompt(twiki("---+++ " + testTitle + "<br><br>
        *Goal:* " + testGoal + "<br>
        *Pre-Requisites:* " + testPreconditions + "<br>
        *Tested Binary:* " + testBinary + "<br>
        *Requirements:* " + testRequirements + "<br>

        | *Step* | *Verification* |
        | Open " + url + " url in a desktop browser | |
        | Launch " + testBinary + " | App launches normally |
        | Select Provider button | |
        | Select nokia provider | |
        | Select Search button | |
        | Select Search Center button | |
        | Fill in " + latitude + " in Latitude field | |
        | Fill in " + longitude + " in Longitude field | |
        | Select Go! button | |
        | Fill in " + search_string + " in Search field | |
        | Select Search button | |
        | Expand panel with results | Verify that number of found places corresponds to the open web page. |"
        ));
    },

    qml_recomendations_for_places_data: {
        data:["48.9", "2.4", "La Romantica", "La Romantica 6996m", "http://places.maps.ovi.com/rest/v1/places/250u09wh-8412aba7c3f8475da0a7ebc5fa713ec4/recommendations/nearby"]
    },

    qml_recomendations_for_places: function(latitude, longitude, search_string, place, url)
    {
        // Test meta data
        testTitle = "QML: Places - Recommendation for places";
        testBinary = "qml_location_places";
        testSource = "$QTDIR/qtlocation/examples/declarative/places"
        testGoal = "Verify that recomendation for places can be found.";
        testPreconditions = "Internet connection is required for this test case. Pass proxy settings to app if needed '--plugin.places.proxy http://172.16.9.165:8080/'";
        testGroups = "BAT,5.0";
        testRequirements = "MTMW-190: Place Discovery";

        // Test steps
        prompt(twiki("---+++ " + testTitle + "<br><br>
        *Goal:* " + testGoal + "<br>
        *Pre-Requisites:* " + testPreconditions + "<br>
        *Tested Binary:* " + testBinary + "<br>
        *Requirements:* " + testRequirements + "<br>

        | *Step* | *Verification* |
        | Open " + url + " url in a desktop browser | |
        | Launch " + testBinary + " | App launches normally |
        | Select Provider button | |
        | Select nokia provider | |
        | Select Search button | |
        | Select Search Center button | |
        | Fill in " + latitude + " in Latitude field | |
        | Fill in " + longitude + " in Longitude field | |
        | Select Go! button | |
        | Fill in " + search_string + " in Search field | |
        | Select Search button | |
        | Expand panel with results | |
        | Select " + place + " | |
        | Select “Find Similar” | Verify that number of found places corresponds to the open web page. Verify that distance to reccommended places is the same. |"
        ));
    },

    qml_suggestions_for_places_data: {
        search_string_of_3_symbols:["48.9", "2.4", "piz", "http://where.desktop.mos.svc.ovi.com/NOSe/json?vi=where&dv=oviMaps&lat=48.9&lon=2.4&of=0&q=piz&lh=1"],
        search_string_of_4_symbols:["48.9", "2.4", "pizz", "http://where.desktop.mos.svc.ovi.com/NOSe/json?vi=where&dv=oviMaps&lat=48.9&lon=2.4&of=0&q=pizz&lh=1"]
    },

    qml_suggestions_for_places: function(latitude, longitude, search_string, url)
    {
        // Test meta data
        testTitle = "QML: Places - Suggestions for places";
        testBinary = "qml_location_places";
        testSource = "$QTDIR/qtlocation/examples/declarative/places"
        testGoal = "Verify that suggestions for places can be obtained.";
        testPreconditions = "Internet connection is required for this test case. Pass proxy settings to app if needed '--plugin.places.proxy http://172.16.9.165:8080/'";
        testGroups = "BAT,5.0";
        testRequirements = "MTMW-190: Place Discovery";

        // Test steps
        prompt(twiki("---+++ " + testTitle + "<br><br>
        *Goal:* " + testGoal + "<br>
        *Pre-Requisites:* " + testPreconditions + "<br>
        *Tested Binary:* " + testBinary + "<br>
        *Requirements:* " + testRequirements + "<br>

        | *Step* | *Verification* |
        | Open " + url + " url in a desktop browser | |
        | Launch " + testBinary + " | App launches normally |
        | Select Provider button | |
        | Select nokia provider | |
        | Select Search button | |
        | Select Search Center button | |
        | Fill in " + latitude + " in Latitude field | |
        | Fill in " + longitude + " in Longitude field | |
        | Select Go! button | |
        | Fill in " + search_string + " in Search field | Verify that list of suggested places corresponds to the open web page. |"
        ));
    },

    qml_place_editorials_data: {
        search_string:["48.9", "2.4", "sushi", "Nakagawa 2838m", "Untitled editorial", "http://places.maps.ovi.com/rest/v1/places/250u09wn-077bc389b68e4642b0dea40dcec9489a"]
    },

    qml_place_editorials: function(latitude, longitude, search_string, place, editorial, url)
    {
        // Test meta data
        testTitle = "QML: Places - Retrieval of editorials";
        testBinary = "qml_location_places";
        testSource = "$QTDIR/qtlocation/examples/declarative/places"
        testGoal = "Verify that editorials for places can be obtained.";
        testPreconditions = "Internet connection is required for this test case. Pass proxy settings to app if needed '--plugin.places.proxy http://172.16.9.165:8080/'";
        testGroups = "BAT,5.0";
        testRequirements = "MTMW-191: Place Retrieval";

        // Test steps
        prompt(twiki("---+++ " + testTitle + "<br><br>
        *Goal:* " + testGoal + "<br>
        *Pre-Requisites:* " + testPreconditions + "<br>
        *Tested Binary:* " + testBinary + "<br>
        *Requirements:* " + testRequirements + "<br>

        | *Step* | *Verification* |
        | Open " + url + " url in a desktop browser | |
        | Launch " + testBinary + " | App launches normally |
        | Select Provider button | |
        | Select nokia provider | |
        | Select Search button | |
        | Select Search Center button | |
        | Fill in " + latitude + " in Latitude field | |
        | Fill in " + longitude + " in Longitude field | |
        | Select Go! button | |
        | Fill in " + search_string + " in Search field | |
        | Select Search button | |
        | Expand panel with results | |
        | Select " + place + " | |
        | Select “Editorials” | |
        | Select " + editorial + " | Verify that text, title and vendor correspond to the 'premiumContent' section of the open web page. |"
        ));
    },

    qml_place_images_data: {
        search_string:["48.9", "2.4", "sushi", "Nakagawa 2838m", "http://places.maps.ovi.com/rest/v1/places/250u09wn-077bc389b68e4642b0dea40dcec9489a/images"]
    },

    qml_place_images: function(latitude, longitude, search_string, place, url)
    {
        // Test meta data
        testTitle = "QML: Places - Retrieval of images";
        testBinary = "qml_location_places";
        testSource = "$QTDIR/qtlocation/examples/declarative/places"
        testGoal = "Verify that editorials for places can be obtained.";
        testPreconditions = "Internet connection is required for this test case. Pass proxy settings to app if needed '--plugin.places.proxy http://172.16.9.165:8080/'";
        testGroups = "BAT,5.0";
        testRequirements = "MTMW-191: Place Retrieval";

        // Test steps
        prompt(twiki("---+++ " + testTitle + "<br><br>
        *Goal:* " + testGoal + "<br>
        *Pre-Requisites:* " + testPreconditions + "<br>
        *Tested Binary:* " + testBinary + "<br>
        *Requirements:* " + testRequirements + "<br>

        | *Step* | *Verification* |
        | Open " + url + " url in a desktop browser | |
        | Launch " + testBinary + " | App launches normally |
        | Select Provider button | |
        | Select nokia provider | |
        | Select Search button | |
        | Select Search Center button | |
        | Fill in " + latitude + " in Latitude field | |
        | Fill in " + longitude + " in Longitude field | |
        | Select Go! button | |
        | Fill in " + search_string + " in Search field | |
        | Select Search button | |
        | Expand panel with results | |
        | Select " + place + " | |
        | Select “Images” | Verify that images correspond to the open web page. |"
        ));
    },

    qml_place_reviews_data: {
        search_string:["48.9", "2.4", "sushi", "Nakagawa 2838m", "http://places.maps.ovi.com/rest/v1/places/250u09wn-077bc389b68e4642b0dea40dcec9489a/reviews?&start=0&limit=100"]
    },

    qml_place_reviews: function(latitude, longitude, search_string, place, url)
    {
        // Test meta data
        testTitle = "QML: Places - Retrieval of reviews";
        testBinary = "qml_location_places";
        testSource = "$QTDIR/qtlocation/examples/declarative/places"
        testGoal = "Verify that editorials for places can be obtained.";
        testPreconditions = "Internet connection is required for this test case. Pass proxy settings to app if needed '--plugin.places.proxy http://172.16.9.165:8080/'";
        testGroups = "BAT,5.0";
        testRequirements = "MTMW-191: Place Retrieval";

        // Test steps
        prompt(twiki("---+++ " + testTitle + "<br><br>
        *Goal:* " + testGoal + "<br>
        *Pre-Requisites:* " + testPreconditions + "<br>
        *Tested Binary:* " + testBinary + "<br>
        *Requirements:* " + testRequirements + "<br>

        | *Step* | *Verification* |
        | Open " + url + " url in a desktop browser | |
        | Launch " + testBinary + " | App launches normally |
        | Select Provider button | |
        | Select nokia provider | |
        | Select Search button | |
        | Select Search Center button | |
        | Fill in " + latitude + " in Latitude field | |
        | Fill in " + longitude + " in Longitude field | |
        | Select Go! button | |
        | Fill in " + search_string + " in Search field | |
        | Select Search button | |
        | Expand panel with results | |
        | Select " + place + " | |
        | Select “Reviews” | Verify that reviews correspond to the open web page. |"
        ));
    },

    qml_place_retrieval_data: {
        search_string:["48.9", "2.4", "sushi", "Nakagawa 2838m", "http://places.maps.ovi.com/rest/v1/places/250u09wn-077bc389b68e4642b0dea40dcec9489a"]
    },

    qml_place_retrieval: function(latitude, longitude, search_string, place, url)
    {
        // Test meta data
        testTitle = "QML: Places - Retrieval of general data of a place";
        testBinary = "qml_location_places";
        testSource = "$QTDIR/qtlocation/examples/declarative/places"
        testGoal = "Verify that general information about place can be obtained.";
        testPreconditions = "Internet connection is required for this test case. Pass proxy settings to app if needed '--plugin.places.proxy http://172.16.9.165:8080/'";
        testGroups = "BAT,5.0";
        testRequirements = "MTMW-191: Place Retrieval";

        // Test steps
        prompt(twiki("---+++ " + testTitle + "<br><br>
        *Goal:* " + testGoal + "<br>
        *Pre-Requisites:* " + testPreconditions + "<br>
        *Tested Binary:* " + testBinary + "<br>
        *Requirements:* " + testRequirements + "<br>

        | *Step* | *Verification* |
        | Open " + url + " url in a desktop browser | |
        | Launch " + testBinary + " | App launches normally |
        | Select Provider button | |
        | Select nokia provider | |
        | Select Search button | |
        | Select Search Center button | |
        | Fill in " + latitude + " in Latitude field | |
        | Fill in " + longitude + " in Longitude field | |
        | Select Go! button | |
        | Fill in " + search_string + " in Search field | |
        | Select Search button | |
        | Expand panel with results | |
        | Select " + place + " | Verify that rating, address, category and contact details correspond to the open web page. |"
        ));
    },

    qml_categories_management_data: {
        category:["mycategory", "mynewcategory"]
    },

    qml_categories_management: function(name, newname)
    {
        // Test meta data
        testTitle = "QML: Places - Creating, editing and deleting categories";
        testBinary = "qml_location_places";
        testSource = "$QTDIR/qtlocation/examples/declarative/places"
        testGoal = "Verify that categories can be created, edited and deleted.";
        testPreconditions = "Jsondb plugin is available. Jsondb is in initial state.";
        testGroups = "BAT,5.0";
        testRequirements = "MTMW-192: Place interaction";

        // Test steps
        prompt(twiki("---+++ " + testTitle + "<br><br>
        *Goal:* " + testGoal + "<br>
        *Pre-Requisites:* " + testPreconditions + "<br>
        *Tested Binary:* " + testBinary + "<br>
        *Requirements:* " + testRequirements + "<br>

        | *Step* | *Verification* |
        | Launch " + testBinary + " | App launches normally |
        | Select Provider button | |
        | Select nokia_places_jsondb provider | |
        | Select Category button | Verify that there are no categories |
        | Select Category button | |
        | Select New button | |
        | Select Category button | |
        | Fill in " + name + " in Name field | |
        | Select Go! button | |
        | Select Category button | Verify that there is only " + name + " |
        | Select Edit button | |
        | Fill in " + newname + " in Name field | |
        | Select Go! button | |
        | Select Category button | Verify that there is only " + newname + "  |
        | Select Delete button | Verify that there are no categories | "
        ));
    },

    qml_places_management_data: {
        place:["myplace", "mynewplace","-27.5", "153"]
    },

    qml_places_management: function(name, newname, latitude,longitude)
    {
        // Test meta data
        testTitle = "QML: Places - Creating, editing and deleting places";
        testBinary = "qml_location_places";
        testSource = "$QTDIR/qtlocation/examples/declarative/places"
        testGoal = "Verify that places can be created, edited and deleted.";
        testPreconditions = "Jsondb plugin is available. Jsondb is in initial state.";
        testGroups = "BAT,5.0";
        testRequirements = "MTMW-192: Place interaction";

        // Test steps
        prompt(twiki("---+++ " + testTitle + "<br><br>
        *Goal:* " + testGoal + "<br>
        *Pre-Requisites:* " + testPreconditions + "<br>
        *Tested Binary:* " + testBinary + "<br>
        *Requirements:* " + testRequirements + "<br>

        | *Step* | *Verification* |
        | Launch " + testBinary + " | App launches normally |
        | Select Provider button | |
        | Select nokia_places_jsondb provider | |
        | Select New button | |
        | Select Place button | |
        | Fill in " + name + " in Name field | |
        | Fill in " + latitude + " in Latitude field | |
        | Fill in " + longitude + " in Longitude field | |
        | Select Go! button | |
        | Fill in " + name + " in search field | |
        | Select Search button | |
        | Expand panel with results | Verify that only " + name + " is found in 0m away |
        | Select " + name + " | |
        | Select Edit button | |
        | Fill in " + newname + " in Name field | |
        | Select Go! button | |
        | Fill in " + name + " in search field | |
        | Select Search button | Verify that no places are found |
        | Fill in " + newname + " in search field | |
        | Select Search button | Verify that only " + newname + " is found in 0m away |
        | Select " + newname + " | |
        | Select Delete button | |
        | Fill in " + newname + " in Search field | |
        | Select Search button | Verify that no places are found |"
        ));
    },

    qml_favorite_places_data: {
        search_string:["-27.5", "153", "sushi", "Oz Sushi" ]
    },

    qml_favorite_places: function(latitude, longitude, search_string, place )
    {
        // Test meta data
        testTitle = "QML: Places - Favorites";
        testBinary = "qml_location_places";
        testSource = "$QTDIR/qtlocation/examples/declarative/places"
        testGoal = "Verify that places can be marked as favorite.";
        testPreconditions = "Jsondb plugin is available. Jsondb is in initial state.";
        testGroups = "BAT,5.0";
        testRequirements = "MOBILITY-2861";

        // Test steps
        prompt(twiki("---+++ " + testTitle + "<br><br>
        *Goal:* " + testGoal + "<br>
        *Pre-Requisites:* " + testPreconditions + "<br>
        *Tested Binary:* " + testBinary + "<br>
        *Requirements:* " + testRequirements + "<br>

        | *Step* | *Verification* |
        | Launch " + testBinary + " | App launches normally |
        | Select Provider button | |
        | Select nokia provider | |
        | Select Search button | |
        | Select Search Center button | |
        | Fill in " + latitude + " in Latitude field | |
        | Fill in " + longitude + " in Longitude field | |
        | Select Go! button | |
        | Select Search button | |
        | Select Search Options button | |
        | Select Enable favorites button | |
        | Fill in " + search_string + " in Search field | |
        | Select Search button | |
        | Expand panel with results | |
        | Select " + place + " | |
        | Select Save as Favorite button | |
        | Select back button | Verify that " + place + " has a star |
        | Select " + place + " | |
        | Select Remove Favorite button | |
        | Select back button | Verify that " + place + " has no star |"
        ));
    },

    qml_places_and_locale_data: {
        greek_string:["38", "24", "pizza", "el", "Greek"],
        english_string:["38", "24", "pizza", "en", "English"]
    },

    qml_places_and_locale: function(latitude, longitude, search_string, locale, language)
    {
        // Test meta data
        testTitle = "QML: Places - Locale handling";
        testBinary = "qml_location_places";
        testSource = "$QTDIR/qtlocation/examples/declarative/places"
        testGoal = "Verify that places can be found for different locale.";
        testPreconditions = "Internet connection is required for this test case. Pass proxy settings to app if needed '--plugin.places.proxy http://172.16.9.165:8080/'";
        testGroups = "BAT,5.0";
        testRequirements = "MOBILITY-2861";

        // Test steps
        prompt(twiki("---+++ " + testTitle + "<br><br>
        *Goal:* " + testGoal + "<br>
        *Pre-Requisites:* " + testPreconditions + "<br>
        *Tested Binary:* " + testBinary + "<br>
        *Requirements:* " + testRequirements + "<br>

        | *Step* | *Verification* |
        | Launch " + testBinary + " | App launches normally |
        | Select Provider button | |
        | Select nokia provider | |
        | Select Search button | |
        | Select Search Options button | |
        | Fill in " + locale + " in Locale(s) field |
        | Select OK button | |
        | Select Search button | |
        | Select Search Center button | |
        | Fill in " + latitude + " in Latitude field | |
        | Fill in " + longitude + " in Longitude field | |
        | Select Go! button | |
        | Fill in " + search_string + " in Search field | |
        | Select Search button | |
        | Expand panel with seacrh results | |
        | Select the fist place | Verify that Category name is in " + language + "|"
       ));
    },

/*
    qml_searching_for_places_by_category_inside_bounding_box: function()
    {
        // Test meta data
        testTitle = "QML: Places - Searching by category inside bounding box";
        testBinary = "qml_location_places";
        testSource = "$QTDIR/qtlocation/examples/declarative/places"
        testGoal = "Verify that places can be found.";
        testPreconditions = "Jsondb plugin is available";
        testGroups = "BAT,5.0";
        testRequirements = "MTMW-190: Place Discovery";
    },
*/

    qml_searching_for_places_by_string_inside_bounding_box_data: {
        data: ["sushi 1", "-27.5", "153", "sushi 2", "-27", "153", "-27.1", "153", "0.3", "0.3", "sushi" ]
    },

    qml_searching_for_places_by_string_inside_bounding_box: function(name1, lat1, long1, name2, lat2, long2, box_lat, box_long, box_width, box_height, search_string)
    {
        // Test meta data
        testTitle = "QML: Places - Searching by text string inside bounding box";
        testBinary = "qml_location_places";
        testSource = "$QTDIR/qtlocation/examples/declarative/places"
        testGoal = "Verify that places can be found.";
        testPreconditions = "Jsondb plugin is available. Jsondb is in initial state.";
        testGroups = "BAT,5.0";
        testRequirements = "MTMW-190: Place Discovery";

        // Test steps
        prompt(twiki("---+++ " + testTitle + "<br><br>
        *Goal:* " + testGoal + "<br>
        *Pre-Requisites:* " + testPreconditions + "<br>
        *Tested Binary:* " + testBinary + "<br>
        *Requirements:* " + testRequirements + "<br>

        | *Step* | *Verification* |
        | Launch " + testBinary + " | App launches normally |
        | Select Provider button | |
        | Select nokia_places_jsondb provider | |
        | Select New button | |
        | Select Place button | |
        | Fill in " + name1 + " in Name field | |
        | Fill in " + lat1 + " in Latitude field | |
        | Fill in " + long1 + " in Longitude field | |
        | Select Go! button | |
        | Select New button | |
        | Select Place button | |
        | Fill in " + name2 + " in Name field | |
        | Fill in " + lat2 + " in Latitude field | |
        | Fill in " + long2 + " in Longitude field | |
        | Select Go! button | |
        | Select Search | |
        | Select Search Bounding Box | |
        | Fill in " + box_lat + " in Latitude field | |
        | Fill in " + box_long + " in Longitude field | |
        | Fill in " + box_width + " in Width field | |
        | Fill in " + box_height + " in Height field | |
        | Select Go! button | |
        | Fill in " + search_string + " in Search field | |
        | Select Search button | |
        | Expand panel with seacrh results | Verify that only " + name2 + " is listed |"
       ));
    },

    qml_searching_for_places_by_string_inside_bounding_circle_data: {
        data: ["sushi 1", "-27.5", "153", "sushi 2", "-27", "153", "-27.5", "153", "10000", "sushi" ]
    },

    qml_searching_for_places_by_string_inside_bounding_circle: function(name1, lat1, long1, name2, lat2, long2, centre_lat, centre_long, radius, search_string)
    {
        // Test meta data
        testTitle = "QML: Places - Searching by text string inside bounding circle";
        testBinary = "qml_location_places";
        testSource = "$QTDIR/qtlocation/examples/declarative/places"
        testGoal = "Verify that places can be found.";
        testPreconditions = "Jsondb plugin is available. Jsondb is in initial state.";
        testGroups = "BAT,5.0";
        testRequirements = "MTMW-190: Place Discovery";

        // Test steps
        prompt(twiki("---+++ " + testTitle + "<br><br>
        *Goal:* " + testGoal + "<br>
        *Pre-Requisites:* " + testPreconditions + "<br>
        *Tested Binary:* " + testBinary + "<br>
        *Requirements:* " + testRequirements + "<br>

        | *Step* | *Verification* |
        | Launch " + testBinary + " | App launches normally |
        | Select Provider button | |
        | Select nokia_places_jsondb provider | |
        | Select New button | |
        | Select Place button | |
        | Fill in " + name1 + " in Name field | |
        | Fill in " + lat1 + " in Latitude field | |
        | Fill in " + long1 + " in Longitude field | |
        | Select Go! button | |
        | Select New button | |
        | Select Place button | |
        | Fill in " + name2 + " in Name field | |
        | Fill in " + lat2 + " in Latitude field | |
        | Fill in " + long2 + " in Longitude field | |
        | Select Go! button | |
        | Select Search | |
        | Select Search Bounding Circle | |
        | Fill in " + centre_lat + " in Latitude field | |
        | Fill in " + centre_long + " in Longitude field | |
        | Fill in " + radius + " in Width field | |
        | Select Go! button | |
        | Fill in " + search_string + " in Search field | |
        | Select Search button | |
        | Expand panel with seacrh results | Verify that only " + name1 + " is listed |"
       ));
    }

}  // end of testcase
