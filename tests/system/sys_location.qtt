/****************************************************************************
**
** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies).
** All rights reserved.
** Contact: Nokia Corporation (qt-info@nokia.com)
**
** This file is part of the test suite of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:LGPL$
** GNU Lesser General Public License Usage
** This file may be used under the terms of the GNU Lesser General Public
** License version 2.1 as published by the Free Software Foundation and
** appearing in the file LICENSE.LGPL included in the packaging of this
** file. Please review the following information to ensure the GNU Lesser
** General Public License version 2.1 requirements will be met:
** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
**
** In addition, as a special exception, Nokia gives you certain additional
** rights. These rights are described in the Nokia Qt LGPL Exception
** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
**
** GNU General Public License Usage
** Alternatively, this file may be used under the terms of the GNU General
** Public License version 3.0 as published by the Free Software Foundation
** and appearing in the file LICENSE.GPL included in the packaging of this
** file. Please review the following information to ensure the GNU General
** Public License version 3.0 requirements will be met:
** http://www.gnu.org/copyleft/gpl.html.
**
** Other Usage
** Alternatively, this file may be used in accordance with the terms and
** conditions contained in a signed written agreement between you and Nokia.
**
**
**
**
**
** $QT_END_LICENSE$
**
****************************************************************************/

//TESTED_COMPONENT=src/location

testcase = {

    qml_select_service_provider: function()
    {
        // Test meta data
        testTitle = "QML: Maps and Navigation - Select Service Provider";
        testBinary = "qml_location_mapviewer";
        testGoal = "Verify that service provider can be selected";
        testPreconditions = "Several service providers should be available. Internet connection is required for this test case.";
        testGroups = "BAT, 5.0";
        testRequirements = "MOBILITY-2861, MOBILITY-538: Maps and Navigation";

        // Test steps
        prompt(twiki("---+++ " + testTitle + "<br><br>
        *Goal:* " + testGoal + "<br>
        *Pre-Requisites:* " + testPreconditions + "<br>
        *Tested Binary:* " + testBinary + "<br>
        *Requirements:* " + testRequirements + "<br>

        | *Step* | *Verification* |
        | Launch " + testBinary + " | App launches normally. Map is displayed on the screen |
        | Pan the map | |
        | Select Provider button | Verify that one of the providers is indicated as current service provider |
        | Select other provider | Verify that map is displayed on the screen with default location next to Brisbane |
        "));
    },

    qml_capturing_coordinates:function()
    {
        // Test meta data
        testTitle = "QML: Maps and Navigation - Coordinate Capturing";
        testBinary = "qml_location_mapviewer";
        testGoal = "Verify that coordinates can be captured when selecting a location on the map.";
        testPreconditions = "internet connection is required for this test case.";
        testGroups = "BAT, 5.0";
        testRequirements = "MOBILITY-2861, MOBILITY-538: Maps and Navigation";

        // Test steps
        prompt(twiki("---+++ " + testTitle + "<br><br>
        *Goal:* " + testGoal + "<br>
        *Pre-Requisites:* " + testPreconditions + "<br>
        *Tested Binary:* " + testBinary + "<br>
        *Requirements:* " + testRequirements + "<br>

        | *Step* | *Verification* |
        | Launch " + testBinary + " | App launches normally. |
        | Select Provider button | |
        | Select nokia provider | Map is displayed on the screen |
        | Zoom in the map to see *Brisbane* | |
        | Press and Hold on the square which represents Brisbane | |
        | Select *Get coordinate* menu item | Verify that dialog with coordinates appears on the screen. Latitude is about *-27.46*, longitude is about *153.02* |"
        ));
    },

    qml_map_types: function()
    {
        // Test meta data
        testTitle = "QML: Maps and Navigation - Map View options";
        testBinary = "qml_location_mapviewer";
        testSource = "$QTDIR/qtlocation/examples/declarative/mapviewer"
        testGoal = "Verify that maps can be shown in different modes.";
        testPreconditions = "internet connection is required for this test case";
        testGroups = "BAT, 5.0";
        testRequirements = "MOBILITY-2861, QTMOBILITY-796: QML for Maps & Navigation: mapping";

        // Test steps
        prompt(twiki("---+++ " + testTitle + "<br><br>
        *Goal:* " + testGoal + "<br>
        *Pre-Requisites:* " + testPreconditions + "<br>
        *Tested Binary:* " + testBinary + "<br>
        *Requirements:* " + testRequirements + "<br>

        | *Step* | *Verification* |
        | Launch " + testBinary + " | Verify that map is loaded in *Street* view with the center next to Brisbane |
        | Select Provider button | |
        | Select nokia provider | Verify that map is displayed in *Street* view |
        | Select Map Type button | |
        | Select Satelite Map(day) | Verify that map is displayed in *Satelite (day)* view |
        | Pan map | Verify that new map tiles are in *Satelite Map(day)* view |
        | Zoom in map | Verify that new map tiles are in *Satelite Map(day)* view |
        | Select Map Type | |
        | Select Terrain Map | Verify that map is displayed in *Terrain (day)* view |
        | Select Map Type | |
        | Select Hybrid Map | Verify that map is displayed in *Hybrid* view |
        | Select Map Type | |
        | Select Transit Map | Verify that map is displayed in *Transit* view |
        | Select Map Type | |
        | Select Gray Street Map | Verify that map is displayed in *Gray Street* view |
        | Select Map Type | |
        | Select Mobile Street Map | Verify that map is displayed in *Mobile Street* view |
        | Select Map Type | |
        | Select Mobile Terrain Map | Verify that map is displayed in *Mobile Terrain* view |
        | Select Map Type | |
        | Select Mobile Hybrid Map | Verify that map is displayed in *Mobile Hybrid* view |
        | Select Map Type | |
        | Select Mobile Transit Map | Verify that map is displayed in *Mobile Transit* view |
        | Select Map Type | |
        | Select Mobile Gray Street Map | Verify that map is displayed in *Mobile Gray Street* view |
        | Select Map Type | |
        | Select Street Map | Verify that map is displayed in *Street (day)* view |"
        ));
    },

    qml_flick_a_map: function()
    {
        // Test meta data
        testTitle = "QML: Maps and Navigation - Flick";
        testBinary = "qml_location_mapviewer";
        testSource = "$QTDIR/qtlocation/examples/declarative/mapviewer"
        testGoal = "Verify that flick gesture works correctly with map.";
        testPreconditions = "internet connection is required for this test case";
        testGroups = "BAT, 5.0";
        testRequirements = "MTMW-239: QML for maps";

        // Test steps
        prompt(twiki("---+++ " + testTitle + "<br><br>
        *Goal:* " + testGoal + "<br>
        *Pre-Requisites:* " + testPreconditions + "<br>
        *Tested Binary:* " + testBinary + "<br>
        *Requirements:* " + testRequirements + "<br>

        | *Step* | *Verification* |
        | Launch " + testBinary + " | Verify that map is loaded with the center next to Brisbane  |
        | Make a long flick gesture from the right side the left | Verify that map center was moving to the left with dropping speed at the end |
        | Make a short flick gesture from the left side the right | Verify that map center was moving to the rigth with dropping speed at the end. Verify that map center has been moved to the less distance in comparing with previous step |
        | Make a flick gesture 2 o'clock direction | Verify that map center was following flick gesture. |
        | Zoom in map close to the maximum zoom level | |
        | Flick map | Verify that flick gesture worked as expected. |"
        ));
    },

    qml_pinch_a_map: function()
    {
        // Test meta data
        testTitle = "QML: Maps and Navigation - Pinch";
        testBinary = "qml_location_mapviewer";
        testSource = "$QTDIR/qtlocation/examples/declarative/mapviewer"
        testGoal = "Verify that pinch gesture works correctly with map.";
        testPreconditions = "internet connection is required for this test case";
        testGroups = "BAT, 5.0";
        testRequirements = "MOBILITY-2861";

        // Test steps
        prompt(twiki("---+++ " + testTitle + "<br><br>
        *Goal:* " + testGoal + "<br>
        *Pre-Requisites:* " + testPreconditions + "<br>
        *Tested Binary:* " + testBinary + "<br>
        *Requirements:* " + testRequirements + "<br>

        | *Step* | *Verification* |
        | Launch " + testBinary + " | Verify that map is loaded with the center next to Brisbane  |
        | Make a long zooming in pinch gesture | Verify that map is zoomed in |
        | Make a short zooming out pinch gesture | Verify that map is zoomed out to less degree incaomparing with previous step. |"
        ));
    },

    qml_pan_a_map: function()
    {
        // Test meta data
        testTitle = "QML: Maps and Navigation - Pan";
        testBinary = "qml_location_mapviewer";
        testSource = "$QTDIR/qtlocation/examples/declarative/mapviewer"
        testGoal = "Verify that pan gesture works correctly";
        testPreconditions = "internet connection is required for this test case";
        testGroups = "BAT, 5.0";
        testRequirements = "MOBILITY-2861";

        // Test steps
        prompt(twiki("---+++ " + testTitle + "<br><br>
        *Goal:* " + testGoal + "<br>
        *Pre-Requisites:* " + testPreconditions + "<br>
        *Tested Binary:* " + testBinary + "<br>
        *Requirements:* " + testRequirements + "<br>

        | *Step* | *Verification* |
        | Launch " + testBinary + " | Verify that map is loaded with the center next to Brisbane  |
        | Pan a map | Verify that map center followed the finger/cursor. Verify that new tiles is uploaded if needed. |
        | Zoom in map close to the maximum zoom level | |
        | Pan map | Verify that pan gesture worked as expected. |"
        ));
    },

    qml_zoom_a_map: function()
    {
        // Test meta data
        testTitle = "QML: Maps and Navigation - Zooming";
        testBinary = "qml_location_mapviewer";
        testSource = "$QTDIR/qtlocation/examples/declarative/mapviewer"
        testGoal = "Verify that maps can be zoomed in and out.";
        testPreconditions = "internet connection is required for this test case";
        testGroups = "BAT, 5.0";
        testRequirements = "MOBILITY-2861, QTMOBILITY-796: QML for Maps & Navigation: mapping";

        // Test steps
        prompt(twiki("---+++ " + testTitle + "<br><br>
        *Goal:* " + testGoal + "<br>
        *Pre-Requisites:* " + testPreconditions + "<br>
        *Tested Binary:* " + testBinary + "<br>
        *Requirements:* " + testRequirements + "<br>

        | *Step* | *Verification* |
        | Launch " + testBinary + " | Verify that map is loaded with the center next to Brisbane  |
        | Move slider to the right | Verify that map is zoomed in |
        | Move slider to the left | Verify that map is zoomed out |
        | Move slider to have zoom level between 8 and 9 | |
        | Move slider the right to have zoom level less than 9 | Verify that map is scaled |
        | Move slider the right to jump over 9 zoom level but less than 10 | Verify that new tiles are displayed to reflect bigger zoom level |"
        ));
    },

    qml_geocode_data: {
        australian_place:["Brandl st", "Eight Mile Plains", "Australia", "http://loc.desktop.maps.svc.ovi.com/geocoder/gc/2.0?referer=qtlocationapi&token=152022572f0e44e07489c35cd46fa246&lg=eng&country=Australia&city=Eight Mile Plains&street=Brandl St"],
        russian_place:["Minina I Pozharskogo Ploshchad", "Nizhny Novgorod", "Russia", "http://loc.desktop.maps.svc.ovi.com/geocoder/gc/2.0?referer=qtlocationapi&token=152022572f0e44e07489c35cd46fa246&lg=eng&country=Russia&city=Nizhny Novgorod&street=Minina I Pozharskogo Ploshchad"],
        fictional_place:["My street", "The Best City", "Australia", "http://loc.desktop.maps.svc.ovi.com/geocoder/gc/2.0?referer=qtlocationapi&token=152022572f0e44e07489c35cd46fa246&lg=eng&country=Australia&city=The Best City&street=My street"]
    },

    qml_geocode: function(street, city, country, url)
    {
        // Test meta data
        testTitle = "QML: Maps and Navigation - Geocoding";
        testBinary = "qml_location_mapviewer";
        testSource = "$QTDIR/qtlocation/examples/declarative/mapviewer"
        testGoal = "Verify that location can be geocoded.";
        testPreconditions = "Internet connection is required for this test case. Pass proxy settings to app if needed '--plugin.places.proxy http://172.16.9.165:8080/'";
        testGroups = "BAT, 5.0";
        testRequirements = "MTMW-236: QML Geocoding";

        // Test steps
        prompt(twiki("---+++ " + testTitle + "<br><br>
        *Goal:* " + testGoal + "<br>
        *Pre-Requisites:* " + testPreconditions + "<br>
        *Tested Binary:* " + testBinary + "<br>
        *Requirements:* " + testRequirements + "<br>

        | *Step* | *Verification* |
        | Open " + url + " url in a desktop browser | |
        | Launch " + testBinary + " | App launches normally |
        | Select Options button | |
        | Select Geocode menu item | |
        | Select Clear All button | |
        | Fill in " + street + " in Street filed | |
        | Fill in " + city + " in City field | |
        | Fill in " + country + " in Country field | |
        | Select Go! button | |
        | Wait for message appears on the screen | Verify that result corresponds to the open web page with latitude and longitude rounded to 4 places |"
        ));
    },

    qml_geocode_not_unique_location_data: {
        request:["Moscow", "Idaho","USA", "http://loc.desktop.maps.svc.ovi.com/geocoder/gc/2.0?referer=qtlocationapi&token=152022572f0e44e07489c35cd46fa246&lg=eng&country=France&city=The Best City",
                 "http://loc.desktop.maps.svc.ovi.com/geocoder/gc/2.0?referer=qtlocationapi&token=152022572f0e44e07489c35cd46fa246&lg=eng&country=USA&state=Idaho&city=Moscow"]
    },

    qml_geocode_not_unique_location: function(city, state, country, url1, url2)
    {
        // Test meta data
        testTitle = "QML: Maps and Navigation - Geocoding of non-unique address";
        testBinary = "qml_location_mapviewer";
        testSource = "$QTDIR/qtlocation/examples/declarative/mapviewer"
        testGoal = "Verify that location can be geocoded.";
        testPreconditions = "Internet connection is required for this test case. Pass proxy settings to app if needed '--plugin.places.proxy http://172.16.9.165:8080/'";
        testGroups = "BAT, 5.0";
        testRequirements = "MTMW-236: QML Geocoding";

        // Test steps
        prompt(twiki("---+++ " + testTitle + "<br><br>
        *Goal:* " + testGoal + "<br>
        *Pre-Requisites:* " + testPreconditions + "<br>
        *Tested Binary:* " + testBinary + "<br>
        *Requirements:* " + testRequirements + "<br>

        | *Step* | *Verification* |
        | Open " + url1 + " url in a desktop browser | |
        | Launch " + testBinary + " | App launches normally |
        | Select Options button | |
        | Select Geocode menu item | |
        | Fill in " + city + " in City field | |
        | Fill in " + country + " in Country field | |
        | Select Go! button | |
        | Wait for message appears on the screen | Verify that several locations were found, number of locations is the same as in the open web page |
        | Open " + url2 + " url in a desktop browser | |
        | Select Options button | |
        | Select Geocode menu item | |
        | Fill in " + state + " in State field | |
        | Wait for message appears on the screen | Verify that result corresponds to the open web page with latitude and longitude rounded to 4 places |"
        ));
    },

    qml_geocode_request_with_post_code_data: {
        request:["4113", "Australia", "http://loc.desktop.maps.svc.ovi.com/geocoder/gc/2.0?referer=qtlocationapi&token=152022572f0e44e07489c35cd46fa246&lg=eng&country=Australia&zip=4113"]
    },

    qml_geocode_request_with_post_code: function(postcode, country, url)
    {
        // Test meta data
        testTitle = "QML: Maps and Navigation - Geocode post code";
        testBinary = "qml_location_mapviewer";
        testSource = "$QTDIR/qtlocation/examples/declarative/mapviewer"
        testGoal = "Verify that location can be geocoded.";
        testPreconditions = "Internet connection is required for this test case. Pass proxy settings to app if needed '--plugin.places.proxy http://172.16.9.165:8080/'";
        testGroups = "BAT, 5.0";
        testRequirements = "MTMW-236: QML Geocoding";

        // Test steps
        prompt(twiki("---+++ " + testTitle + "<br><br>
        *Goal:* " + testGoal + "<br>
        *Pre-Requisites:* " + testPreconditions + "<br>
        *Tested Binary:* " + testBinary + "<br>
        *Requirements:* " + testRequirements + "<br>

        | *Step* | *Verification* |
        | Open " + url + " url in a desktop browser | |
        | Launch " + testBinary + " | App launches normally |
        | Select Options button | |
        | Select Geocode menu item | |
        | Select Clear All button | |
        | Fill in " + postcode + " in Post Code field | |
        | Fill in " + country + " in Country field | |
        | Select Go! button | |
        | Wait for message appears on the screen | Verify that result corresponds to the open web page with latitude and longitude rounded to 4 places |"
        ));
    },

    qml_reverse_geocode_data: {
        australian_place:["-27.575", "153.088", "http://loc.desktop.maps.svc.ovi.com/geocoder/rgc/2.0?referer=qtlocationapi&token=152022572f0e44e07489c35cd46fa246&long=153.088&lat=-27.575&lg=eng"],
        russian_place:["56.3264", "44.0048", "http://loc.desktop.maps.svc.ovi.com/geocoder/rgc/2.0?referer=qtlocationapi&token=152022572f0e44e07489c35cd46fa246&long=44.0048&lat=56.3264&lg=eng"],
        uninhabited_place:["-26.8890", "154.6696", "http://loc.desktop.maps.svc.ovi.com/geocoder/rgc/2.0?referer=qtlocationapi&token=152022572f0e44e07489c35cd46fa246&long=154.6696&lat=-26.889&lg=eng"]
    },

    qml_reverse_geocode: function(latitude, longitude, url)
    {
        // Test meta data
        testTitle = "QML: Maps and Navigation - Reverse geocode";
        testBinary = "qml_location_mapviewer";
        testSource = "$QTDIR/qtlocation/examples/declarative/mapviewer"
        testGoal = "Verify that location can be geocoded.";
        testPreconditions = "Internet connection is required for this test case. Pass proxy settings to app if needed '--plugin.places.proxy http://172.16.9.165:8080/'";
        testGroups = "BAT, 5.0";
        testRequirements = "MTMW-237:QML Reverse geocoding";

        // Test steps
        prompt(twiki("---+++ " + testTitle + "<br><br>
        *Goal:* " + testGoal + "<br>
        *Pre-Requisites:* " + testPreconditions + "<br>
        *Tested Binary:* " + testBinary + "<br>
        *Requirements:* " + testRequirements + "<br>

        | *Step* | *Verification* |
        | Open " + url + " url in a desktop browser | |
        | Launch " + testBinary + " | App launches normally |
        | Select Options button | |
        | Select Reverse Geocode | |
        | Fill in " + latitude + " in Latitude filed | |
        | Fill in " + longitude + " in Longitude field | |
        | Select Go! button | |
        | Wait for message appears on the screen | Verify that result corresponds to the open web page with latitude and longitude rounded to 4 places |"
        ));
    },

    qml_route_for_two_points_data: {
        close_points:["-27.575", "153.088", "-27.465", "153.023", "http://prd.lbsp.navteq.com/routing/6.2/calculateroute.xml?referer=qtlocationapi&token=152022572f0e44e07489c35cd46fa246&waypoint0=-27.575,153.088&waypoint1=-27.465,153.023&mode0=fastestNow;car&alternatives=0&linkattributes=sh,le&maneuverattributes=po,tt,le,di,li&routeattributes=sm,sh,bb,lg&legattributes=links,maneuvers&departure=2011-12-28T21:51:25Z&instructionformat=text&language=en_AU"],
        medium_distant_points:["-27.4709", "153.0235", "-33.8689", "151.2071", "http://prd.lbsp.navteq.com/routing/6.2/calculateroute.xml?referer=qtlocationapi&token=152022572f0e44e07489c35cd46fa246&waypoint0=-27.4709,153.0235&waypoint1=-33.8689,151.2071&mode0=fastestNow;car&alternatives=0&linkattributes=sh,le&maneuverattributes=po,tt,le,di,li&routeattributes=sm,sh,bb,lg&legattributes=links,maneuvers&departure=2011-12-28T21:52:33Z&instructionformat=text&language=en_AU"],
        distant_points:["-27.4709", "153.0235", "56.3167", "44", "http://prd.lbsp.navteq.com/routing/6.2/calculateroute.xml?referer=qtlocationapi&token=152022572f0e44e07489c35cd46fa246&waypoint0=-27.4709,153.0235&waypoint1=56.3167,44&mode0=fastestNow;car&alternatives=0&linkattributes=sh,le&maneuverattributes=po,tt,le,di,li&routeattributes=sm,sh,bb,lg&legattributes=links,maneuvers&departure=2011-12-28T21:54:35Z&instructionformat=text&language=en_AU"]
    },

    qml_route_for_two_points: function(lat1, long1, lat2, long2, url)
    {
        // Test meta data
        testTitle = "QML: Maps and Navigation - Route for two points";
        testBinary = "qml_location_mapviewer";
        testSource = "$QTDIR/qtlocation/examples/declarative/mapviewer"
        testGoal = "Verify that route can be calculated.";
        testPreconditions = "Internet connection is required for this test case";
        testGroups = "BAT, 5.0";
        testRequirements = "MTMW-235: QML Routing";

        // Test steps
        prompt(twiki("---+++ " + testTitle + "<br><br>
        *Goal:* " + testGoal + "<br>
        *Pre-Requisites:* " + testPreconditions + "<br>
        *Tested Binary:* " + testBinary + "<br>
        *Requirements:* " + testRequirements + "<br>

        | *Step* | *Verification* |
        | Open " + url + " url in a desktop browser | |
        | Launch " + testBinary + " | App launches normally |
        | Select Options button | |
        | Select Route menu item | |
        | Fill in " + lat1 + " in From Latitude field | |
        | Fill in " + long1 + " in From Longitude filed | |
        | Fill in " + lat2 + " in To Latitude field | |
        | Fill in " + long2 + " in To Longitude filed | |
        | Select Go! button | |
        | Wait for the route to be calculated. Expand route info if there were no errors | Verify route information corresponds to the open web page |"
        ));
    },


    qml_route_for_two_addresses_data: {
        points:["Brandle st","Eight Mile Plains", "Australia", "Brunswick st", "New Farm", "Australia", "http://prd.lbsp.navteq.com/routing/6.2/calculateroute.xml?referer=qtlocationapi&token=152022572f0e44e07489c35cd46fa246&waypoint0=-27.5791,153.098&waypoint1=-27.4622,153.0398&mode0=fastestNow;car&alternatives=0&linkattributes=sh,le&maneuverattributes=po,tt,le,di,li&routeattributes=sm,sh,bb,lg&legattributes=links,maneuvers&departure=2011-12-28T22:03:58Z&instructionformat=text&language=en_AU"],
    },


    qml_route_for_two_addresses: function(street1, city1, country1, street2, city2, country2, url) {
        // Test meta data
        testTitle = "QML: Maps and Navigation - Route for two addresses";
        testBinary = "qml_location_mapviewer";
        testSource = "$QTDIR/qtlocation/examples/declarative/mapviewer"
        testGoal = "Verify that route can be calculated.";
        testPreconditions = "Internet connection is required for this test case. Pass proxy settings to app if needed '--plugin.places.proxy http://172.16.9.165:8080/'";
        testGroups = "BAT, 5.0";
        testRequirements = "MTMW-235: QML Routing";

        // Test steps
        prompt(twiki("---+++ " + testTitle + "<br><br>
        *Goal:* " + testGoal + "<br>
        *Pre-Requisites:* " + testPreconditions + "<br>
        *Tested Binary:* " + testBinary + "<br>
        *Requirements:* " + testRequirements + "<br>

        | *Step* | *Verification* |
        | Open " + url + " url in a desktop browser | |
        | Launch " + testBinary + " | App launches normally |
        | Select Options button | |
        | Select Route menu item | |
        | Select second option group to enter start and end points as address | |
        | Fill in " + city1 + " in From City field | |
        | Fill in " + country1 + " in From Country filed | |
        | Fill in " + city2 + " in To City field | |
        | Fill in " + country2 + " in To Country filed | |
        | Select Go! button | |
        | Wait for the route to be calculated. Expand route info if there were no errors | Verify route information corresponds to the open web page |"
        ));
    },

    qml_route_for_three_points_data:{
        points:["-27.575", "153.088", "-27.465", "153.023", "-27.3614", "153.0043", "http://prd.lbsp.navteq.com/routing/6.2/calculateroute.xml?referer=qtlocationapi&token=152022572f0e44e07489c35cd46fa246&waypoint0=-27.575,153.088&waypoint1=-27.465,153.023&waypoint2=-27.36140072373,153.004295826&mode0=shortest;car&alternatives=0&linkattributes=sh,le&maneuverattributes=po,tt,le,di,li&routeattributes=sm,sh,bb,lg&legattributes=links,maneuvers&departure=2011-12-28T22:05:50Z&instructionformat=text&language=en_AU"]
    },

    qml_route_for_three_points: function(lat1, long1, lat2, long2, lat3, long3, url)
    {
        // Test meta data
        testTitle = "QML: Maps and Navigation - Route for several waypoints";
        testBinary = "qml_location_mapviewer";
        testSource = "$QTDIR/qtlocation/examples/declarative/mapviewer"
        testGoal = "Verify that route can be calculated.";
        testPreconditions = "Internet connection is required for this test case";
        testGroups = "BAT, 5.0";
        testRequirements = "MTMW-235: QML Routing";

        // Test steps
        prompt(twiki("---+++ " + testTitle + "<br><br>
        *Goal:* " + testGoal + "<br>
        *Pre-Requisites:* " + testPreconditions + "<br>
        *Tested Binary:* " + testBinary + "<br>
        *Requirements:* " + testRequirements + "<br>

        | *Step* | *Verification* |
        | Open " + url + " url in a desktop browser | |
        | Launch " + testBinary + " | App launches normally |
        | Long press on the map | |
        | Select Set Marker menu item | |
        | Create another Marker via Long Press | |
        | Create third Marker | |
        | Long Press on the first marker | |
        | Select Move To menu item | |
        | Fill in " + lat1 + " in Latitude filed | |
        | Fill in " + long1 + " in Longitude | |
        | Select Go! button | |
        | Long Press on the second marker | |
        | Select Move To menu item | |
        | Fill in " + lat2 + " in Latitude filed | |
        | Fill in " + long2 + " in Longitude | |
        | Select Go! button | |
        | Long Press on the third marker | |
        | Select Move To menu item | |
        | Fill in " + lat3 + " in Latitude filed | |
        | Fill in " + long3 + " in Longitude | |
        | Press Go! button | |
        | Long press on the map | |
        | Select Route To The Next Points | |
        | Wait for the route to be calculated. Expand route info if there were no errors | Verify route information corresponds to the open web page |"
        ));
    },

    qml_travel_mode_data: {
        point:["-27.5789", "153.0919", "-27.5792", "153.096",
               "http://prd.lbsp.navteq.com/routing/6.2/calculateroute.xml?referer=qtlocationapi&token=152022572f0e44e07489c35cd46fa246&waypoint0=-27.5789,153.0919&waypoint1=-27.5792,153.096&mode0=fastestNow;car&alternatives=0&linkattributes=sh,le&maneuverattributes=po,tt,le,di,li&routeattributes=sm,sh,bb,lg&legattributes=links,maneuvers&departure=2011-12-28T22:07:16Z&instructionformat=text&language=en_AU",
               "http://prd.lbsp.navteq.com/routing/6.2/calculateroute.xml?referer=qtlocationapi&token=152022572f0e44e07489c35cd46fa246&waypoint0=-27.5789,153.0919&waypoint1=-27.5792,153.096&mode0=fastestNow;pedestrian&alternatives=0&linkattributes=sh,le&maneuverattributes=po,tt,le,di,li&routeattributes=sm,sh,bb,lg&legattributes=links,maneuvers&departure=2011-12-28T22:07:51Z&instructionformat=text&language=en_AU"]
    },

    qml_travel_mode: function(lat1, long1, lat2, long2, url1, url2)
    {
        // Test meta data
        testTitle = "QML: Maps and Navigation - Travel mode (Car and Pedestrian)";
        testBinary = "qml_location_mapviewer";
        testSource = "$QTDIR/qtlocation/examples/declarative/mapviewer"
        testGoal = "Verify that route can be calculated.";
        testPreconditions = "Internet connection is required for this test case";
        testGroups = "BAT, 5.0";
        testRequirements = "MTMW-235: QML Routing";

        // Test steps
        prompt(twiki("---+++ " + testTitle + "<br><br>
        *Goal:* " + testGoal + "<br>
        *Pre-Requisites:* " + testPreconditions + "<br>
        *Tested Binary:* " + testBinary + "<br>
        *Requirements:* " + testRequirements + "<br>

        | *Step* | *Verification* |
        | Open " + url1 + " url in a desktop browser | |
        | Launch " + testBinary + " | App launches normally |
        | Select Options button | |
        | Select Route menu item | |
        | Selec first option group | |
        | Fill in " + lat1 + " in From Latitude field | |
        | Fill in " + long1 + " in From Longitude filed | |
        | Fill in " + lat2 + " in To Latitude field | |
        | Fill in " + long2 + " in To Longitude filed | |
        | Select Go! button | |
        | Wait for the route to be calculated. Expand route info if there were no errors | Verify route information corresponds to the open web page |
        | Open " + url2 + " url in a desktop browser | |
        | Select Options button | |
        | Select Route menu item | |
        | Select *Pedestrian* option button | |
        | Select Go! button | |
        | Wait for the route to be calculated. Expand route info if there were no errors | Verify route information corresponds to the open web page |"
        ));
    },

    qml_travel_feature_type: {
        points:["-27.5299", "153.0713", "-27.4395", "153.0504",
                "http://prd.lbsp.navteq.com/routing/6.2/calculateroute.xml?referer=qtlocationapi&token=152022572f0e44e07489c35cd46fa246&waypoint0=-27.5299,153.0713&waypoint1=-27.4395,153.0504&mode0=fastestNow;car;tollroad:-1&alternatives=0&linkattributes=sh,le&maneuverattributes=po,tt,le,di,li&routeattributes=sm,sh,bb,lg&legattributes=links,maneuvers&departure=2011-12-28T22:16:14Z&instructionformat=text&language=en_AU",
                "http://prd.lbsp.navteq.com/routing/6.2/calculateroute.xml?referer=qtlocationapi&token=152022572f0e44e07489c35cd46fa246&waypoint0=-27.5299,153.0713&waypoint1=-27.4395,153.0504&mode0=fastestNow;car;tollroad:-1,motorway:-1&alternatives=0&linkattributes=sh,le&maneuverattributes=po,tt,le,di,li&routeattributes=sm,sh,bb,lg&legattributes=links,maneuvers&departure=2011-12-28T22:16:37Z&instructionformat=text&language=en_AU"]
    },

    qml_route_feature_type: function(lat1, long1, lat2, long2, url1, url2)
    {
        // Test meta data
        testTitle = "QML: Maps and Navigation - Route features (Avoid Highways and Avoid Tool Road)";
        testBinary = "qml_location_mapviewer";
        testSource = "$QTDIR/qtlocation/examples/declarative/mapviewer"
        testGoal = "Verify that route can be calculated.";
        testPreconditions = "Internet connection is required for this test case";
        testGroups = "BAT, 5.0";
        testRequirements = "MTMW-235: QML Routing";

        // Test steps
        prompt(twiki("---+++ " + testTitle + "<br><br>
        *Goal:* " + testGoal + "<br>
        *Pre-Requisites:* " + testPreconditions + "<br>
        *Tested Binary:* " + testBinary + "<br>
        *Requirements:* " + testRequirements + "<br>

        | *Step* | *Verification* |
        | Open " + url1 + " url in a desktop browser | |
        | Launch " + testBinary + " | App launches normally |
        | Select Options button | |
        | Select Route menu item | |
        | Selec first option group | |
        | Fill in " + lat1 + " in From Latitude field | |
        | Fill in " + long1 + " in From Longitude filed | |
        | Fill in " + lat2 + " in To Latitude field | |
        | Fill in " + long2 + " in To Longitude filed | |
        | Select *Avoid toll roads* checkbox | |
        | Select Go! button | |
        | Wait for the route to be calculated. Expand route info if there were no errors | Verify route information corresponds to the open web page |
        | Select Options button | |
        | Select Route menu item | |
        | Select *Avoid highways* checkbox | |
        | Select Go! button | |
        | Wait for the route to be calculated. Expand route info if there were no errors | Verify route information corresponds to the open web page |"
        ));
    },

    qml_route_optimization_data: {
        points:["-27.5013", "153.1002", "-27.4395", "153.0504",
                "http://prd.lbsp.navteq.com/routing/6.2/calculateroute.xml?referer=qtlocationapi&token=152022572f0e44e07489c35cd46fa246&waypoint0=-27.5013,153.1002&waypoint1=-27.4395,153.0504&mode0=fastestNow;car&alternatives=0&linkattributes=sh,le&maneuverattributes=po,tt,le,di,li&routeattributes=sm,sh,bb,lg&legattributes=links,maneuvers&departure=2011-12-28T22:55:13Z&instructionformat=text&language=en_AU",
                "http://prd.lbsp.navteq.com/routing/6.2/calculateroute.xml?referer=qtlocationapi&token=152022572f0e44e07489c35cd46fa246&waypoint0=-27.5013,153.1002&waypoint1=-27.4395,153.0504&mode0=shortest;car&alternatives=0&linkattributes=sh,le&maneuverattributes=po,tt,le,di,li&routeattributes=sm,sh,bb,lg&legattributes=links,maneuvers&departure=2011-12-28T22:56:07Z&instructionformat=text&language=en_AU"]
    },

    qml_route_optimization: function(lat1, long1, lat2, long2, url1, url2)
    {
        // Test meta data
        testTitle = "QML: Maps and Navigation - Route optimization (Shortest and Fastest)";
        testBinary = "qml_location_mapviewer";
        testSource = "$QTDIR/qtlocation/examples/declarative/mapviewer"
        testGoal = "Verify that route can be calculated.";
        testPreconditions = "Internet connection is required for this test case";
        testGroups = "BAT, 5.0";
        testRequirements = "MTMW-235: QML Routing";

        // Test steps
        prompt(twiki("---+++ " + testTitle + "<br><br>
        *Goal:* " + testGoal + "<br>
        *Pre-Requisites:* " + testPreconditions + "<br>
        *Tested Binary:* " + testBinary + "<br>
        *Requirements:* " + testRequirements + "<br>

        | *Step* | *Verification* |
        | Open " + url1 + " url in a desktop browser | |
        | Launch " + testBinary + " | App launches normally |
        | Select Options button | |
        | Select Route menu item | |
        | Selec first option group | |
        | Fill in " + lat1 + " in From Latitude field | |
        | Fill in " + long1 + " in From Longitude filed | |
        | Fill in " + lat2 + " in To Latitude field | |
        | Fill in " + long2 + " in To Longitude filed | |
        | Select Go! button | |
        | Wait for the route to be calculated. Expand route info if there were no errors | Verify route information corresponds to the open web page |
        | Open " + url2 + " url in a desktop browser | |
        | Select Options button | |
        | Select Route menu item | |
        | Select *Shortest* option button | |
        | Select Go! button | |
        | Wait for the route to be calculated. Expand route info if there were no errors | Verify route information corresponds to the open web page |"
        ));
    },

    qml_distance_between_points_data: {
        points:["-27.5013", "153.1002", "-27.4395", "153.0504", "8.4"]
    },

    qml_distance_between_points:function(lat1, long1, lat2, long2, distance)
    {
        testTitle = "QML: Maps and Navigation - Distance between points";
        testBinary = "qml_location_mapviewer";
        testSource = "$QTDIR/qtlocation/examples/declarative/mapviewer"
        testGoal = "Verify that distance between points can be calculated.";
        testPreconditions = "Internet connection is required for this test case.";
        testGroups = "BAT,5.0";
        testRequirements = "MOBILITY-2861";

        // Test steps
        prompt(twiki("---+++ " + testTitle + "<br><br>
        *Goal:* " + testGoal + "<br>
        *Pre-Requisites:* " + testPreconditions + "<br>
        *Tested Binary:* " + testBinary + "<br>
        *Requirements:* " + testRequirements + "<br>

        | *Step* | *Verification* |
        | Launch " + testBinary + " | App launches normally |
        | Long press on the map | |
        | Select Set Marker menu item | |
        | Create another Marker via Long Press | |
        | Long Press on the first marker | |
        | Select Move To menu item | |
        | Fill in " + lat1 + " in Latitude filed | |
        | Fill in " + long1 + " in Longitude | |
        | Select Go! button | |
        | Long Press on the second marker | |
        | Select Move To menu item | |
        | Fill in " + lat2 + " in Latitude filed | |
        | Fill in " + long2 + " in Longitude | |
        | Select Go! button | |
        | Long Press on the first marker | |
        | Select *Distance to the next point* | Verify that distance is " + distance + " |"
        ));
    },

    qml_border_wrapping_for_map_data: {
        markers:["-27", "150", "-27", "-170"]
    },

    qml_border_wrapping_for_map: function(lat1, long1, lat2, long2)
    {
        // Test meta data
        testTitle = "QML: Maps and Navigation - Border wrapping";
        testBinary = "qml_location_mapviewer";
        testSource = "$QTDIR/qtlocation/examples/declarative/mapviewer"
        testGoal = "Verify that border wrapping works correctly for map and map items.";
        testPreconditions = "Internet connection is required for this test case";
        testGroups = "BAT, 5.0";
        testRequirements = "MOBILITY-2861";

        // Test steps
        prompt(twiki("---+++ " + testTitle + "<br><br>
        *Goal:* " + testGoal + "<br>
        *Pre-Requisites:* " + testPreconditions + "<br>
        *Tested Binary:* " + testBinary + "<br>
        *Requirements:* " + testRequirements + "<br>

        | *Step* | *Verification* |
        | Launch " + testBinary + " | App launches normally |
        | Zoom out map to about level 3 | |
        | Long press on the map | |
        | Select Set Marker menu item | |
        | Create another Marker via Long Press | |
        | Long Press on the first marker | |
        | Select Move To menu item | |
        | Fill in " + lat1 + " in Latitude filed | |
        | Fill in " + long1 + " in Longitude | |
        | Select Go! button | |
        | Long Press on the second marker | |
        | Select Move To menu item | |
        | Fill in " + lat2 + " in Latitude filed | |
        | Fill in " + long2 + " in Longitude | |
        | Select Go! button | |
        | Pan map to the left so the map center crosses dateline | Verify that there are 2 markers on the screen |
        | Pan map to the right so the map center crosses dateline | Verify that there are 2 markers on the screen |
        | Zoom out hte map to zoom level 0 | |
        | Pan map to make round-the-world trip | Verify that map looks and behaves as flattened cylinder. Verify that all markers visible and drawn correctly. |"
        ));
    },

    qml_geocoding_and_locale_data: {
        greek_place:["38", "24", "el"]
    },

    qml_geocoding_and_locale: function(latitude, longtitude, locale)
    {
        // Test meta data
        testTitle = "QML: Geocoding - Locale handling";
        testBinary = "qml_location_places";
        testSource = "$QTDIR/qtlocation/examples/declarative/places"
        testGoal = "Verify that geocode information can be present in different languages.";
        testPreconditions = "Internet connection is required for this test case. Pass proxy settings to app if needed '--plugin.places.proxy http://172.16.9.165:8080/'";
        testGroups = "BAT,5.0";
        testRequirements = "MOBILITY-2861";

        // Test steps
        prompt(twiki("---+++ " + testTitle + "<br><br>
        *Goal:* " + testGoal + "<br>
        *Pre-Requisites:* " + testPreconditions + "<br>
        *Tested Binary:* " + testBinary + "<br>
        *Requirements:* " + testRequirements + "<br>

        | *Step* | *Verification* |
        | Launch " + testBinary + " | App launches normally |
        | Select Reverse geocode | |
        | Fill in " + latitude + " in Latitude filed | |
        | Fill in " + longtitude + " in Longitude field | |
        | Select Go! | |
        | Wait for success geocode message | Verify that address is in English|
        | Select *en* button | |
        | Select Other | |
        | Fill in " + locale + " in Language filed | |
        | Select Go! | |
        | Select Reverse geocode | |
        | Select Go! | |
        | Wait for success geocode message | Verify that address is in Greek|"
        ));
    },

    qml_routing_and_locale: function()
    {
        // Test meta data
        testTitle = "QML: Routing - Locale handling";
        testBinary = "qml_location_places";
        testSource = "$QTDIR/qtlocation/examples/declarative/places"
        testGoal = "Verify that route information can be present in different languages and measurement systems.";
        testPreconditions = "Internet connection is required for this test case.";
        testGroups = "BAT,5.0";
        testRequirements = "MOBILITY-2861";

        // Test steps
        prompt(twiki("---+++ " + testTitle + "<br><br>
        *Goal:* " + testGoal + "<br>
        *Pre-Requisites:* " + testPreconditions + "<br>
        *Tested Binary:* " + testBinary + "<br>
        *Requirements:* " + testRequirements + "<br>

        | *Step* | *Verification* |
        | Launch " + testBinary + " | App launches normally |
        | Select Options | |
        | Select Route | |
        | Select Go! | |
        | Expand information about rhe route | Verify that instructions is in English and uses imperial system |
        | Close info tab |
        | Select En button | |
        | Select Fr | |
        | Select Options | |
        | Select Route | |
        | Select Go! | |
        | Expand information about rhe route | Verify that instructions is in Franch and uses metric system |"
        ));
    },

/*
    qml_current_position: function()
    {
        // Test meta data
        testTitle = "QML: Maps and Navigation - Current Position";
        testBinary = "qml_location_mapviewer";
        testGoal = "Verify that current position is detected and displayed.";
        testPreconditions = "Internet connection is required for this test case.";
        testGroups = "BAT, 5.0";
        testRequirements = "MOBILITY-2888, MOBILITY-65: Basic Location Functionality ";
    },

    qml_location_is_updated: function()
    {
        // Test meta data
        testTitle = "QML: Maps and Navigation - Current Position";
        testBinary = "qml_location_mapviewer";
        testGoal = "Verify that location data is received and map is updated after changing location.";
        testPreconditions = "Internet connection is required for this test case.";
        testGroups = "BAT, 5.0";
        testRequirements = "MOBILITY-2888, MOBILITY-65: Basic Location Functionality ";
    }

    qml_polyline_mapitem:function()
    {
        testTitle = "QML: Maps and Navigation - Interaction with mapitems";
        testBinary = "qml_location_mapviewer";
        testSource = "$QTDIR/qtlocation/examples/declarative/mapviewer"
        testGoal = "Verify that polyline can be drawn on map.";
        testPreconditions = "Internet connection is required for this test case.";
        testGroups = "BAT, 5.0";
        testRequirements = "MOBILITY-2861";
    },

    qml_polygon_mapitem:function()
    {
        testTitle = "QML: Maps and Navigation - Interaction with mapitems";
        testBinary = "qml_location_mapviewer";
        testSource = "$QTDIR/qtlocation/examples/declarative/mapviewer"
        testGoal = "Verify that polygon can be drawn on map.";
        testPreconditions = "Internet connection is required for this test case.";
        testGroups = "BAT, 5.0";
        testRequirements = "MOBILITY-2861";
    },

    qml_circle_mapitem:function()
    {
        testTitle = "QML: Maps and Navigation - Interaction with mapitems";
        testBinary = "qml_location_mapviewer";
        testSource = "$QTDIR/qtlocation/examples/declarative/mapviewer"
        testGoal = "Verify that circle can be drawn on map.";
        testPreconditions = "Internet connection is required for this test case.";
        testGroups = "BAT, 5.0";
        testRequirements = "MOBILITY-2861";
    },

    qml_video_mapitem:function()
    {
        testTitle = "QML: Maps and Navigation - Interaction with mapitems";
        testBinary = "qml_location_mapviewer";
        testSource = "$QTDIR/qtlocation/examples/declarative/mapviewer"
        testGoal = "Verify that video can be placed on map.";
        testPreconditions = "Internet connection is required for this test case.";
        testGroups = "BAT, 5.0";
        testRequirements = "MOBILITY-2861";
    },

    qml_image_mapitem:function()
    {
        testTitle = "QML: Maps and Navigation - Interaction with mapitems";
        testBinary = "qml_location_mapviewer";
        testSource = "$QTDIR/qtlocation/examples/declarative/mapviewer"
        testGoal = "Verify that circle can be drawn on map.";
        testPreconditions = "Internet connection is required for this test casei.";
        testGroups = "BAT, 5.0";
        testRequirements = "MOBILITY-2861";
    },

    qml_3dqml_mapitem:function()
    {
        testTitle = "QML: Maps and Navigation - Interaction with mapitems";
        testBinary = "qml_location_mapviewer";
        testSource = "$QTDIR/qtlocation/examples/declarative/mapviewer"
        testGoal = "Verify that 3D QML item can be drawn on map.";
        testPreconditions = "Internet connection is required for this test case.";
        testGroups = "BAT, 5.0";
        testRequirements = "MOBILITY-2861";
    },

    qml_mapitems_zooming: function()
    {
        // Test meta data
        testTitle = "QML: Maps and Navigation - Mapitem object zooming";
        testBinary = "qml_location_mapviewer";
        testSource = "$QTDIR/qtlocation/examples/declarative/mapviewer"
        testGoal = "Verify that pixmap objects are not scaled, verify that vector objects are scaled.";
        testPreconditions = "Internet connection is required for this test case.";
        testGroups = "BAT, 5.0";
        testRequirements = "MOBILITY-2861, QTMOBILITY-757: Be able to prevent a QGeoMapPixmapObject from being scaled when zooming occurs, QTMOBILITY-701: Add a QGraphicsItem based map object.";
    },

    qml_mapitem_interaction:function()
    {
        testTitle = "QML: Maps and Navigation - Interaction with mapitems";
        testBinary = "qml_location_mapviewer";
        testSource = "$QTDIR/qtlocation/examples/declarative/mapviewer"
        testGoal = "Verify that mapitems can handle touch/mouse events.";
        testPreconditions = "Internet connection is required for this test case.";
        testGroups = "BAT, 5.0";
        testRequirements = "MOBILITY-2861";
    },
*/

    qml_searching_for_places_by_category_for_given_position_data: {
        data:["48.9", "2.4", "Shopping", "Pharmacy", "http://where.desktop.mos.svc.ovi.com/NOSe/json?vi=where&dv=oviMaps&lat=48.9&lon=2.4&of=0&dym=5&q=Pharmacy",
              "http://where.desktop.mos.svc.ovi.com/NOSe/json?vi=where&dv=oviMaps&lat=48.9&lon=2.4&of=0&dym=5&q=Shopping"]
    },

    qml_searching_for_places_by_category_for_given_position: function(latitude, longitude, category, subcategory, url1, url2)
    {
        // Test meta data
        testTitle = "QML: Places - Searching by category for the given position";
        testBinary = "qml_location_places";
        testSource = "$QTDIR/qtlocation/examples/declarative/places"
        testGoal = "Verify that places can be found.";
        testPreconditions = "Internet connection is required for this test case. Pass proxy settings to app if needed '--plugin.places.proxy http://172.16.9.165:8080/'";
        testGroups = "BAT,5.0";
        testRequirements = "MTMW-190: Place Discovery";

        // Test steps
        prompt(twiki("---+++ " + testTitle + "<br><br>
        *Goal:* " + testGoal + "<br>
        *Pre-Requisites:* " + testPreconditions + "<br>
        *Tested Binary:* " + testBinary + "<br>
        *Requirements:* " + testRequirements + "<br>

        | *Step* | *Verification* |
        | Open " + url1 + " url in a desktop browser | |
        | Launch " + testBinary + " | App launches normally |
        | Select Provider button | |
        | Select nokia provider | |
        | Select Goto button | |
        | Fill in " + latitude + " in Latitude filed | |
        | Fill in " + longitude + " in Longitude field | |
        | Select Go! button | |
        | Select Categories button | |
        | Select Right arrow next to " + category + " | |
        | Select " + subcategory + " | |
        | Expand panel with seacrh results | Verify that number of found places corresponds to the open web page. Verify that details of the first place is the same. |
        | Hide panel with results | |
        | Open " + url2 + " url in a desktop browser | |
        | Select Categories button | |
        | Select Back button | |
        | Select " + category + " | |
        | Expand panel with seacrh result | Verify that number of found places corresponds to the open web page. Verify that details of the first place is the same. |"
        ));
    },

    qml_searching_for_places_by_text_string_for_given_position_data: {
        search_string:["48.9", "2.4", "pizza", "http://where.desktop.mos.svc.ovi.com/NOSe/json?vi=where&dv=oviMaps&lat=48.9&lon=2.4&of=0&dym=5&q=pizza"],
        search_string_with_typo:["-27.5", "153", "pizzs", "http://where.desktop.mos.svc.ovi.com/NOSe/json?vi=where&dv=oviMaps&lat=-27.5&lon=153&of=0&dym=5&q=pizzs"]
    },

    qml_searching_for_places_by_text_string_for_given_position: function(latitude, longitude, search_string, url)
    {
        // Test meta data
        testTitle = "QML: Places - Searching by text string for the given position";
        testBinary = "qml_location_places";
        testSource = "$QTDIR/qtlocation/examples/declarative/places"
        testGoal = "Verify that places can be found.";
        testPreconditions = "Internet connection is required for this test case. Pass proxy settings to app if needed '--plugin.places.proxy http://172.16.9.165:8080/'";
        testGroups = "BAT,5.0";
        testRequirements = "MTMW-190: Place Discovery";

        // Test steps
        prompt(twiki("---+++ " + testTitle + "<br><br>
        *Goal:* " + testGoal + "<br>
        *Pre-Requisites:* " + testPreconditions + "<br>
        *Tested Binary:* " + testBinary + "<br>
        *Requirements:* " + testRequirements + "<br>

        | *Step* | *Verification* |
        | Open " + url + " url in a desktop browser | |
        | Launch " + testBinary + " | App launches normally |
        | Select Provider button | |
        | Select nokia provider | |
        | Select Goto button | |
        | Fill in " + latitude + " in Latitude filed | |
        | Fill in " + longitude + " in Longitude field | |
        | Select Go! button | |
        | Fill in " + search_string + " | |
        | Select Search button | |
        | Expand panel with results | Verify that number of found places corresponds to the open web page. Verify that details of the first place is the same. |"
        ));
    },

    qml_recomendations_for_places_data: {
        data:["48.9", "2.4", "La Romantica", "La Romantica 6996m", "http://places.maps.ovi.com/rest/v1/places/250u09wh-8412aba7c3f8475da0a7ebc5fa713ec4/recommendations/nearby"]
    },

    qml_recomendations_for_places: function(latitude, longitude, search_string, place, url)
    {
        // Test meta data
        testTitle = "QML: Places - Recommendation for places";
        testBinary = "qml_location_places";
        testSource = "$QTDIR/qtlocation/examples/declarative/places"
        testGoal = "Verify that recomendation for places can be found.";
        testPreconditions = "Internet connection is required for this test case. Pass proxy settings to app if needed '--plugin.places.proxy http://172.16.9.165:8080/'";
        testGroups = "BAT,5.0";
        testRequirements = "MTMW-190: Place Discovery";

        // Test steps
        prompt(twiki("---+++ " + testTitle + "<br><br>
        *Goal:* " + testGoal + "<br>
        *Pre-Requisites:* " + testPreconditions + "<br>
        *Tested Binary:* " + testBinary + "<br>
        *Requirements:* " + testRequirements + "<br>

        | *Step* | *Verification* |
        | Open " + url + " url in a desktop browser | |
        | Launch " + testBinary + " | App launches normally |
        | Select Provider button | |
        | Select nokia provider | |
        | Select Goto button | |
        | Fill in " + latitude + " in Latitude filed | |
        | Fill in " + longitude + " in Longitude field | |
        | Select Go! button | |
        | Fill in " + search_string + " | |
        | Select Search button | |
        | Expand panel with results | |
        | Select " + place + " | |
        | Select “Find Similar” | Verify that number of found places corresponds to the open web page. Verify that distance to reccommended places is the same. |"
        ));
    },

    qml_suggestions_for_places_data: {
        search_string_of_3_symbols:["48.9", "2.4", "piz", "http://where.desktop.mos.svc.ovi.com/NOSe/json?vi=where&dv=oviMaps&lat=48.9&lon=2.4&of=0&q=piz&lh=1"],
        search_string_of_4_symbols:["48.9", "2.4", "pizz", "http://where.desktop.mos.svc.ovi.com/NOSe/json?vi=where&dv=oviMaps&lat=48.9&lon=2.4&of=0&q=pizz&lh=1"]
    },

    qml_suggestions_for_places: function(latitude, longitude, search_string, url)
    {
        // Test meta data
        testTitle = "QML: Places - Suggestions for places";
        testBinary = "qml_location_places";
        testSource = "$QTDIR/qtlocation/examples/declarative/places"
        testGoal = "Verify that suggestions for places can be obtained.";
        testPreconditions = "Internet connection is required for this test case. Pass proxy settings to app if needed '--plugin.places.proxy http://172.16.9.165:8080/'";
        testGroups = "BAT,5.0";
        testRequirements = "MTMW-190: Place Discovery";

        // Test steps
        prompt(twiki("---+++ " + testTitle + "<br><br>
        *Goal:* " + testGoal + "<br>
        *Pre-Requisites:* " + testPreconditions + "<br>
        *Tested Binary:* " + testBinary + "<br>
        *Requirements:* " + testRequirements + "<br>

        | *Step* | *Verification* |
        | Open " + url + " url in a desktop browser | |
        | Launch " + testBinary + " | App launches normally |
        | Select Provider button | |
        | Select nokia provider | |
        | Select Goto button | |
        | Fill in " + latitude + " in Latitude filed | |
        | Fill in " + longitude + " in Longitude field | |
        | Select Go! button | |
        | Fill in " + search_string + " | Verify that list of suggested places corresponds to the open web page. |"
        ));
    },

    qml_place_editorials_data: {
        search_string:["-27.5", "153", "sushi", "Oz Sushi 1865m", "Oz sushi", "http://places.maps.ovi.com/rest/v1/places/036r7hg9-3e09424ccf6246d49ac94c367386376b"]
    },

    qml_place_editorials: function(latitude, longitude, search_string, place, editorial, url)
    {
        // Test meta data
        testTitle = "QML: Places - Retrieval of editorials";
        testBinary = "qml_location_places";
        testSource = "$QTDIR/qtlocation/examples/declarative/places"
        testGoal = "Verify that editorials for places can be obtained.";
        testPreconditions = "Internet connection is required for this test case. Pass proxy settings to app if needed '--plugin.places.proxy http://172.16.9.165:8080/'";
        testGroups = "BAT,5.0";
        testRequirements = "MTMW-191: Place Retrieval";

        // Test steps
        prompt(twiki("---+++ " + testTitle + "<br><br>
        *Goal:* " + testGoal + "<br>
        *Pre-Requisites:* " + testPreconditions + "<br>
        *Tested Binary:* " + testBinary + "<br>
        *Requirements:* " + testRequirements + "<br>

        | *Step* | *Verification* |
        | Open " + url + " url in a desktop browser | |
        | Launch " + testBinary + " | App launches normally |
        | Select Provider button | |
        | Select nokia provider | |
        | Select Goto button | |
        | Fill in " + latitude + " in Latitude filed | |
        | Fill in " + longitude + " in Longitude field | |
        | Select Go! button | |
        | Fill in " + search_string + " | |
        | Select Search button | |
        | Expand panel with results | |
        | Select " + place + " | |
        | Select “Editorials” | |
        | Select " + editorial + " | Verify that text, title and vendor correspond to the 'premiumContent' section of the open web page. |"
        ));
    },

    qml_place_images_data: {
        search_string:["48.9", "2.4", "sushi", "Nakagawa 2838m", "http://places.maps.ovi.com/rest/v1/places/250u09wn-077bc389b68e4642b0dea40dcec9489a/images"]
    },

    qml_place_images: function(latitude, longitude, search_string, place, url)
    {
        // Test meta data
        testTitle = "QML: Places - Retrieval of images";
        testBinary = "qml_location_places";
        testSource = "$QTDIR/qtlocation/examples/declarative/places"
        testGoal = "Verify that editorials for places can be obtained.";
        testPreconditions = "Internet connection is required for this test case. Pass proxy settings to app if needed '--plugin.places.proxy http://172.16.9.165:8080/'";
        testGroups = "BAT,5.0";
        testRequirements = "MTMW-191: Place Retrieval";

        // Test steps
        prompt(twiki("---+++ " + testTitle + "<br><br>
        *Goal:* " + testGoal + "<br>
        *Pre-Requisites:* " + testPreconditions + "<br>
        *Tested Binary:* " + testBinary + "<br>
        *Requirements:* " + testRequirements + "<br>

        | *Step* | *Verification* |
        | Open " + url + " url in a desktop browser | |
        | Launch " + testBinary + " | App launches normally |
        | Select Provider button | |
        | Select nokia provider | |
        | Select Goto button | |
        | Fill in " + latitude + " in Latitude filed | |
        | Fill in " + longitude + " in Longitude field | |
        | Select Go! button | |
        | Fill in " + search_string + " | |
        | Select Search button | |
        | Expand panel with results | |
        | Select " + place + " | |
        | Select “Images” | Verify that images correspond to the open web page. |"
        ));
    },

    qml_place_reviews_data: {
        search_string:["48.9", "2.4", "sushi", "Nakagawa 2838m", "http://places.maps.ovi.com/rest/v1/places/250u09wn-077bc389b68e4642b0dea40dcec9489a/reviews"]
    },

    qml_place_reviews: function(latitude, longitude, search_string, place, url)
    {
        // Test meta data
        testTitle = "QML: Places - Retrieval of reviews";
        testBinary = "qml_location_places";
        testSource = "$QTDIR/qtlocation/examples/declarative/places"
        testGoal = "Verify that editorials for places can be obtained.";
        testPreconditions = "Internet connection is required for this test case. Pass proxy settings to app if needed '--plugin.places.proxy http://172.16.9.165:8080/'";
        testGroups = "BAT,5.0";
        testRequirements = "MTMW-191: Place Retrieval";

        // Test steps
        prompt(twiki("---+++ " + testTitle + "<br><br>
        *Goal:* " + testGoal + "<br>
        *Pre-Requisites:* " + testPreconditions + "<br>
        *Tested Binary:* " + testBinary + "<br>
        *Requirements:* " + testRequirements + "<br>

        | *Step* | *Verification* |
        | Open " + url + " url in a desktop browser | |
        | Launch " + testBinary + " | App launches normally |
        | Select Provider button | |
        | Select nokia provider | |
        | Select Goto button | |
        | Fill in " + latitude + " in Latitude filed | |
        | Fill in " + longitude + " in Longitude field | |
        | Select Go! button | |
        | Fill in " + search_string + " | |
        | Select Search button | |
        | Expand panel with results | |
        | Select " + place + " | |
        | Select “Reviews” | Verify that reviews correspond to the open web page. |"
        ));
    },

    qml_place_retrieval_data: {
        search_string:["-27.5", "153", "sushi", "Oz Sushi 1865m", "http://places.maps.ovi.com/rest/v1/places/036r7hg9-3e09424ccf6246d49ac94c367386376b"]
    },

    qml_place_retrieval: function(latitude, longitude, search_string, place, url)
    {
        // Test meta data
        testTitle = "QML: Places - Retrieval of general data of a place";
        testBinary = "qml_location_places";
        testSource = "$QTDIR/qtlocation/examples/declarative/places"
        testGoal = "Verify that general information about place can be obtained.";
        testPreconditions = "Internet connection is required for this test case. Pass proxy settings to app if needed '--plugin.places.proxy http://172.16.9.165:8080/'";
        testGroups = "BAT,5.0";
        testRequirements = "MTMW-191: Place Retrieval";

        // Test steps
        prompt(twiki("---+++ " + testTitle + "<br><br>
        *Goal:* " + testGoal + "<br>
        *Pre-Requisites:* " + testPreconditions + "<br>
        *Tested Binary:* " + testBinary + "<br>
        *Requirements:* " + testRequirements + "<br>

        | *Step* | *Verification* |
        | Open " + url + " url in a desktop browser | |
        | Launch " + testBinary + " | App launches normally |
        | Select Provider button | |
        | Select nokia provider | |
        | Select Goto button | |
        | Fill in " + latitude + " in Latitude filed | |
        | Fill in " + longitude + " in Longitude field | |
        | Select Go! button | |
        | Fill in " + search_string + " | |
        | Select Search button | |
        | Expand panel with results | |
        | Select " + place + " | Verify that rating, address, category and contact details correspond to the open web page. |"
        ));
    }

    /*
    qml_places_and_locale: function(latitude, longtitude, locale)
    {
        // Test meta data
        testTitle = "QML: Places - Locale handling";
        testBinary = "qml_location_places";
        testSource = "$QTDIR/qtlocation/examples/declarative/places"
        testGoal = "Verify that places can be found for different locale.";
        testPreconditions = "Internet connection is required for this test case. Pass proxy settings to app if needed '--plugin.places.proxy http://172.16.9.165:8080/'";
        testGroups = "BAT,5.0";
        testRequirements = "MOBILITY-2861";
    }

    qml_searching_for_places_by_category_inside_bounding_box: function()
    {
        // Test meta data
        testTitle = "QML: Places - Searching by category inside bounding box";
        testBinary = "qml_location_places";
        testSource = "$QTDIR/qtlocation/examples/declarative/places"
        testGoal = "Verify that places can be found.";
        testPreconditions = "Internet connection is required for this test case. Pass proxy settings to app if needed '--plugin.places.proxy http://172.16.9.165:8080/'";
        testGroups = "BAT,5.0";
        testRequirements = "MTMW-190: Place Discovery";
    },

    qml_searching_for_places_by_text_string_inside_bounding_box: function()
    {
        // Test meta data
        testTitle = "QML: Places - Searching by text string inside bounding box";
        testBinary = "qml_location_places";
        testSource = "$QTDIR/qtlocation/examples/declarative/places"
        testGoal = "Verify that places can be found.";
        testPreconditions = "Internet connection is required for this test case. Pass proxy settings to app if needed '--plugin.places.proxy http://172.16.9.165:8080/'";
        testGroups = "BAT,5.0";
        testRequirements = "MTMW-190: Place Discovery";
    }
*/
}  // end of testcase
