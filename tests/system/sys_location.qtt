/****************************************************************************
**
** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies).
** All rights reserved.
** Contact: Nokia Corporation (qt-info@nokia.com)
**
** This file is part of the test suite of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:LGPL$
** GNU Lesser General Public License Usage
** This file may be used under the terms of the GNU Lesser General Public
** License version 2.1 as published by the Free Software Foundation and
** appearing in the file LICENSE.LGPL included in the packaging of this
** file. Please review the following information to ensure the GNU Lesser
** General Public License version 2.1 requirements will be met:
** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
**
** In addition, as a special exception, Nokia gives you certain additional
** rights. These rights are described in the Nokia Qt LGPL Exception
** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
**
** GNU General Public License Usage
** Alternatively, this file may be used under the terms of the GNU General
** Public License version 3.0 as published by the Free Software Foundation
** and appearing in the file LICENSE.GPL included in the packaging of this
** file. Please review the following information to ensure the GNU General
** Public License version 3.0 requirements will be met:
** http://www.gnu.org/copyleft/gpl.html.
**
** Other Usage
** Alternatively, this file may be used in accordance with the terms and
** conditions contained in a signed written agreement between you and Nokia.
**
**
**
**
**
** $QT_END_LICENSE$
**
****************************************************************************/

//TESTED_COMPONENT=src/location

testcase = {

/*
    third_party_position_source: function()
    {
        // Test meta data
        testTitle = "Location - Position Detection via Custom Plugin";
        testBinary = "testQtLocation"; // this is part of BlueWeel project, sources are in git@scm.dev.nokia.troll.no:qtmobility/qtmobility-tests.git
        testGoal = "Verify that positions can be detected using third party plugins";
        testPreconditions = "GPS and internet connection is required for this test case";
        testGroups = "BAT,1.2";
        testRequirements = "QTMOBILITY-873: Allow 3rd party position sources";

        // Test steps
        prompt(twiki("---+++ " + testTitle + "<br><br>
        *Goal:* " + testGoal + "<br>
        *Pre-Requisites:* " + testPreconditions + "<br>
        *Tested Binary:* " + testBinary + "<br>
        *Requirements:* " + testRequirements + "<br>

        | *Step* | *Verification* |
        | Launch " + testBinary + " | App launches normally |
        | Select the Custom Service | Verify that no 'Unable to register location service' and 'Not valid interface.' messages appear |
        | Press the Update Map button | Verify that map was loaded and correct current position is displayed |"
        ));
    },
*/
    qml_select_service_provider: function()
    {
        // Test meta data
        testTitle = "QML: Maps and Navigation - Select Service Provider";
        testBinary = "qml_location_mapviewer";
        testGoal = "Verify that service provider can be selected";
        testPreconditions = "Several service providers should be available. Internet connection is required for this test case.";
        testGroups = "BAT, 5.0";
        testRequirements = "MOBILITY-2861, MOBILITY-538: Maps and Navigation";

        // Test steps
        prompt(twiki("---+++ " + testTitle + "<br><br>
        *Goal:* " + testGoal + "<br>
        *Pre-Requisites:* " + testPreconditions + "<br>
        *Tested Binary:* " + testBinary + "<br>
        *Requirements:* " + testRequirements + "<br>

        | *Step* | *Verification* |
        | Launch " + testBinary + " | App launches normally. Map is displayed on the screen |
        | Pan the map | |
        | Press Provider button | Verify that on of the providers is indicated as current service provider |
        | Select other provider | Verify that map is displayed on the screen with default location next to Brisbane |
        "));
    },

    qml_capturing_coordinates:function()
    {
        // Test meta data
        testTitle = "QML: Maps and Navigation - Coordinate Capturing";
        testBinary = "qml_location_mapviewer";
        testGoal = "Verify that coordinates can be captured when selecting a location on the map.";
        testPreconditions = "internet connection is required for this test case.";
        testGroups = "BAT, 5.0";
        testRequirements = "MOBILITY-2861, MOBILITY-538: Maps and Navigation";

        // Test steps
        prompt(twiki("---+++ " + testTitle + "<br><br>
        *Goal:* " + testGoal + "<br>
        *Pre-Requisites:* " + testPreconditions + "<br>
        *Tested Binary:* " + testBinary + "<br>
        *Requirements:* " + testRequirements + "<br>

        | *Step* | *Verification* |
        | Launch " + testBinary + " | App launches normally. |
        | Press Provider button | |
        | Select nokia provider | Map is displayed on the screen |
        | Zoom in the map to see *Brisbane* | |
        | Press and Hold on the square which represents Brisbane | |
        | Select *Get coordinate* menu item | Verify that dialog with coordinates appears on the screen. Latitude is about *-27.46*, longitude is about *153.02* |"
        ));
    },

    qml_map_types: function()
    {
        // Test meta data
        testTitle = "QML: Maps and Navigation - Map View options";
        testBinary = "qml_location_mapviewer";
        testSource = "$QTDIR/qtlocation/examples/declarative/mapviewer"
        testGoal = "Verify that maps can be shown in different modes.";
        testPreconditions = "internet connection is required for this test case";
        testGroups = "BAT, 5.0";
        testRequirements = "MOBILITY-2861, QTMOBILITY-796: QML for Maps & Navigation: mapping";

        // Test steps
        prompt(twiki("---+++ " + testTitle + "<br><br>
        *Goal:* " + testGoal + "<br>
        *Pre-Requisites:* " + testPreconditions + "<br>
        *Tested Binary:* " + testBinary + "<br>
        *Requirements:* " + testRequirements + "<br>

        | *Step* | *Verification* |
        | Launch " + testBinary + " | Verify that map is loaded in *Street* view with the center next to Brisbane |
        | Press Provider button | |
        | Select nokia provider | Verify that map is displayed in *Street* view |
        | Press Map Type button | |
        | Select Satelite Map(day) | Verify that map is displayed in *Satelite (day)* view |
        | Pan map | Verify that new map tiles are in *Satelite Map(day)* view |
        | Zoom in map | Verify that new map tiles are in *Satelite Map(day)* view |
        | Press Map Type | |
        | Select Terrain Map | Verify that map is displayed in *Terrain (day)* view |
        | Press Map Type | |
        | Select Hybrid Map | Verify that map is displayed in *Hybrid* view |
        | Press Map Type | |
        | Select Transit Map | Verify that map is displayed in *Transit* view |
        | Press Map Type | |
        | Select Gray Street Map | Verify that map is displayed in *Gray Street* view |
        | Press Map Type | |
        | Select Mobile Street Map | Verify that map is displayed in *Mobile Street* view |
        | Press Map Type | |
        | Select Mobile Terrain Map | Verify that map is displayed in *Mobile Terrain* view |
        | Press Map Type | |
        | Select Mobile Hybrid Map | Verify that map is displayed in *Mobile Hybrid* view |
        | Press Map Type | |
        | Select Mobile Transit Map | Verify that map is displayed in *Mobile Transit* view |
        | Press Map Type | |
        | Select Mobile Gray Street Map | Verify that map is displayed in *Mobile Gray Street* view |
        | Press Map Type | |
        | Select Street Map | Verify that map is displayed in *Street (day)* view |"
        ));
    },

    qml_flick_a_map: function()
    {
        // Test meta data
        testTitle = "QML: Maps and Navigation - Flick";
        testBinary = "qml_location_mapviewer";
        testSource = "$QTDIR/qtlocation/examples/declarative/mapviewer"
        testGoal = "Verify that flick gesture works correctly with map.";
        testPreconditions = "internet connection is required for this test case";
        testGroups = "BAT, 5.0";
        testRequirements = "MTMW-239: QML for maps";

        // Test steps
        prompt(twiki("---+++ " + testTitle + "<br><br>
        *Goal:* " + testGoal + "<br>
        *Pre-Requisites:* " + testPreconditions + "<br>
        *Tested Binary:* " + testBinary + "<br>
        *Requirements:* " + testRequirements + "<br>

        | *Step* | *Verification* |
        | Launch " + testBinary + " | Verify that map is loaded with the center next to Brisbane  |
        | Make a long flick gesture from the right side the left | Verify that map center was moving to the left with dropping speed at the end |
        | Make a short flick gesture from the left side the right | Verify that map center was moving to the rigth with dropping speed at the end. Verify that map center has been moved to the less distance in comparing with previous step |
        | Make a flick gesture 2 o'clock direction | Verify that map center was following flick gesture. |
        | Zoom in map close to the maximum zoom level | |
        | Flick map | Verify that flick gesture worked as expected. |"
        ));
    },

    qml_pinch_a_map: function()
    {
        // Test meta data
        testTitle = "QML: Maps and Navigation - Pinch";
        testBinary = "qml_location_mapviewer";
        testSource = "$QTDIR/qtlocation/examples/declarative/mapviewer"
        testGoal = "Verify that pinch gesture works correctly with map.";
        testPreconditions = "internet connection is required for this test case";
        testGroups = "BAT, 5.0";
        testRequirements = "MOBILITY-2861";

        // Test steps
        prompt(twiki("---+++ " + testTitle + "<br><br>
        *Goal:* " + testGoal + "<br>
        *Pre-Requisites:* " + testPreconditions + "<br>
        *Tested Binary:* " + testBinary + "<br>
        *Requirements:* " + testRequirements + "<br>

        | *Step* | *Verification* |
        | Launch " + testBinary + " | Verify that map is loaded with the center next to Brisbane  |
        | Make a long zooming in pinch gesture | Verify that map is zoomed in |
        | Make a short zooming out pinch gesture | Verify that map is zoomed out to less degree incaomparing with previous step. |"
        ));
    },

    qml_pan_a_map: function()
    {
        // Test meta data
        testTitle = "QML: Maps and Navigation - Pan";
        testBinary = "qml_location_mapviewer";
        testSource = "$QTDIR/qtlocation/examples/declarative/mapviewer"
        testGoal = "Verify that pan gesture works correctly";
        testPreconditions = "internet connection is required for this test case";
        testGroups = "BAT, 5.0";
        testRequirements = "MOBILITY-2861";

        // Test steps
        prompt(twiki("---+++ " + testTitle + "<br><br>
        *Goal:* " + testGoal + "<br>
        *Pre-Requisites:* " + testPreconditions + "<br>
        *Tested Binary:* " + testBinary + "<br>
        *Requirements:* " + testRequirements + "<br>

        | *Step* | *Verification* |
        | Launch " + testBinary + " | Verify that map is loaded with the center next to Brisbane  |
        | Pan a map | Verify that map center followed the finger/cursor. Verify that new tiles is uploaded if needed. |"
        ));
    },

    qml_zoom_a_map: function()
    {
        // Test meta data
        testTitle = "QML: Maps and Navigation - Zooming";
        testBinary = "qml_location_mapviewer";
        testSource = "$QTDIR/qtlocation/examples/declarative/mapviewer"
        testGoal = "Verify that maps can be zoomed in and out.";
        testPreconditions = "internet connection is required for this test case";
        testGroups = "BAT, 5.0";
        testRequirements = "MOBILITY-2861, QTMOBILITY-796: QML for Maps & Navigation: mapping";

        // Test steps
        prompt(twiki("---+++ " + testTitle + "<br><br>
        *Goal:* " + testGoal + "<br>
        *Pre-Requisites:* " + testPreconditions + "<br>
        *Tested Binary:* " + testBinary + "<br>
        *Requirements:* " + testRequirements + "<br>

        | *Step* | *Verification* |
        | Launch " + testBinary + " | Verify that map is loaded with the center next to Brisbane  |
        | Move slider to the right | Verify that map is zoomed in |
        | Move slider to the left | Verify that map is zoomed out |
        | Move slider to have zoom level between 8 and 9 | |
        | Move slider the right to have zoom level less than 9 | Verify that map is scaled |
        | Move slider the right to jump over 9 zoom level but less than 10 | Verify that new tiles are displayed to reflect bigger zoom level |"
        ));
    },

    qml_geocode_data: {
        australian_place:["Brandl st", "Eight Mile Plains", "Australia", "http://loc.desktop.maps.svc.ovi.com/geocoder/gc/2.0?referer=qtlocationapi&token=152022572f0e44e07489c35cd46fa246&lg=eng&country=Australia&city=Eight Mile Plains&street=Brandl St"],
        russian_place:["Minina I Pozharskogo Ploshchad", "Nizhny Novgorod", "Russia", "http://loc.desktop.maps.svc.ovi.com/geocoder/gc/2.0?referer=qtlocationapi&token=152022572f0e44e07489c35cd46fa246&lg=eng&country=Russia&city=Nizhny Novgorod&street=Minina I Pozharskogo Ploshchad"],
        fictional_place:["My street", "The Best City", "Australia", "http://loc.desktop.maps.svc.ovi.com/geocoder/gc/2.0?referer=qtlocationapi&token=152022572f0e44e07489c35cd46fa246&lg=eng&country=Australia&city=The Best City&street=My street"]
    },

    qml_geocode: function(street, city, country, url)
    {
        // Test meta data
        testTitle = "QML: Maps and Navigation - Geocoding";
        testBinary = "qml_location_mapviewer";
        testSource = "$QTDIR/qtlocation/examples/declarative/mapviewer"
        testGoal = "Verify that location can be geocoded.";
        testPreconditions = "Internet connection is required for this test case. Pass proxy settings to app if needed '--plugin.places.proxy http://172.16.9.165:8080/'";
        testGroups = "BAT, 5.0";
        testRequirements = "MTMW-236: QML Geocoding";

        // Test steps
        prompt(twiki("---+++ " + testTitle + "<br><br>
        *Goal:* " + testGoal + "<br>
        *Pre-Requisites:* " + testPreconditions + "<br>
        *Tested Binary:* " + testBinary + "<br>
        *Requirements:* " + testRequirements + "<br>

        | *Step* | *Verification* |
        | Open " + url + " url in a desktop browser | |
        | Launch " + testBinary + " | App launches normally |
        | Press Options button | |
        | Select Geocode menu item | |
        | Press Clear All button | |
        | Fill in " + street + " in Street filed | |
        | Fill in " + city + " in City field | |
        | Fill in " + country + " in Country field | |
        | Press Go! button | |
        | Wait for message appears on the screen | Verify that result corresponds to the open web page with latitude and longitude rounded to 4 places |"
        ));
    },

    qml_geocode_not_unique_location_data: {
        request:["Moscow", "Idaho","USA", "http://loc.desktop.maps.svc.ovi.com/geocoder/gc/2.0?referer=qtlocationapi&token=152022572f0e44e07489c35cd46fa246&lg=eng&country=France&city=The Best City",
                 "http://loc.desktop.maps.svc.ovi.com/geocoder/gc/2.0?referer=qtlocationapi&token=152022572f0e44e07489c35cd46fa246&lg=eng&country=USA&state=Idaho&city=Moscow"]
    },

    qml_geocode_not_unique_location: function(city, state, country, url1, url2)
    {
        // Test meta data
        testTitle = "QML: Maps and Navigation - Geocoding of non-unique address";
        testBinary = "qml_location_mapviewer";
        testSource = "$QTDIR/qtlocation/examples/declarative/mapviewer"
        testGoal = "Verify that location can be geocoded.";
        testPreconditions = "Internet connection is required for this test case. Pass proxy settings to app if needed '--plugin.places.proxy http://172.16.9.165:8080/'";
        testGroups = "BAT, 5.0";
        testRequirements = "MTMW-236: QML Geocoding";

        // Test steps
        prompt(twiki("---+++ " + testTitle + "<br><br>
        *Goal:* " + testGoal + "<br>
        *Pre-Requisites:* " + testPreconditions + "<br>
        *Tested Binary:* " + testBinary + "<br>
        *Requirements:* " + testRequirements + "<br>

        | *Step* | *Verification* |
        | Open " + url1 + " url in a desktop browser | |
        | Launch " + testBinary + " | App launches normally |
        | Press Options button | |
        | Select Geocode menu item | |
        | Fill in " + city + " in City field | |
        | Fill in " + country + " in Country field | |
        | Press Go! button | |
        | Wait for message appears on the screen | Verify that several locations were found, number of locations is the same as in the open web page |
        | Open " + url2 + " url in a desktop browser | |
        | Press Options button | |
        | Select Geocode menu item | |
        | Fill in " + state + " in State field | |
        | Wait for message appears on the screen | Verify that result corresponds to the open web page with latitude and longitude rounded to 4 places |"
        ));
    },

    qml_geocode_request_with_district_data: {
        request:["Nizhny Novgorod", "Priokskiy rayon", "Russia"]
    },

    qml_geocode_request_with_district: function(city, district, country)
    {
        // Test meta data
        testTitle = "QML: Maps and Navigation - Geocode district";
        testBinary = "qml_location_mapviewer";
        testSource = "$QTDIR/qtlocation/examples/declarative/mapviewer"
        testGoal = "Verify that location can be geocoded.";
        testPreconditions = "Internet connection is required for this test case. Pass proxy settings to app if needed '--plugin.places.proxy http://172.16.9.165:8080/'";
        testGroups = "BAT, 5.0";
        testRequirements = "MTMW-236: QML Geocoding";

        // Test steps
        prompt(twiki("---+++ " + testTitle + "<br><br>
        *Goal:* " + testGoal + "<br>
        *Pre-Requisites:* " + testPreconditions + "<br>
        *Tested Binary:* " + testBinary + "<br>
        *Requirements:* " + testRequirements + "<br>

        | *Step* | *Verification* |
        | Launch " + testBinary + " | App launches normally |
        | Press Options button | |
        | Select Geocode menu item | |
        | Press Clear All button | |
        | Fill in " + city + " in City filed | |
        | Fill in " + country + " in Country field | |
        | Fill in " + district + " in District field | |
        | Press Go! button | |
        | Wait for message appears on the screen | Verify that geocode was successful with latitude *56.3217*, longitude *44.0331* |"
        ));
    },

    qml_geocode_request_with_county_data: {
        request:["Norfolk", "United Kingdom"]
    },

    qml_geocode_request_with_county: function(county, country)
    {
        // Test meta data
        testTitle = "QML: Maps and Navigation - Geocode county";
        testBinary = "qml_location_mapviewer";
        testSource = "$QTDIR/qtlocation/examples/declarative/mapviewer"
        testGoal = "Verify that location can be geocoded.";
        testPreconditions = "Internet connection is required for this test case. Pass proxy settings to app if needed '--plugin.places.proxy http://172.16.9.165:8080/'";
        testGroups = "BAT, 5.0";
        testRequirements = "MTMW-236: QML Geocoding";

        // Test steps
        prompt(twiki("---+++ " + testTitle + "<br><br>
        *Goal:* " + testGoal + "<br>
        *Pre-Requisites:* " + testPreconditions + "<br>
        *Tested Binary:* " + testBinary + "<br>
        *Requirements:* " + testRequirements + "<br>

        | *Step* | *Verification* |
        | Launch " + testBinary + " | App launches normally |
        | Press Options button | |
        | Select Geocode menu item | |
        | Press Clear All button | |
        | Fill in " + county + " in County filed | |
        | Fill in " + country + " in Country field | |
        | Press Go! button | |
        | Wait for message appears on the screen | Verify that geocode was successful with latitude *52.614*, longitude *0.8864* |"
        ));
    },

    qml_geocode_request_with_country_code_data: {
        request:["AUS"]
    },

    qml_geocode_request_with_country_code: function(country_code)
    {
        // Test meta data
        testTitle = "QML: Maps and Navigation - Geocode country code";
        testBinary = "qml_location_mapviewer";
        testSource = "$QTDIR/qtlocation/examples/declarative/mapviewer"
        testGoal = "Verify that location can be geocoded.";
        testPreconditions = "Internet connection is required for this test case. Pass proxy settings to app if needed '--plugin.places.proxy http://172.16.9.165:8080/'";
        testGroups = "BAT, 5.0";
        testRequirements = "MTMW-236: QML Geocoding";

        // Test steps
        prompt(twiki("---+++ " + testTitle + "<br><br>
        *Goal:* " + testGoal + "<br>
        *Pre-Requisites:* " + testPreconditions + "<br>
        *Tested Binary:* " + testBinary + "<br>
        *Requirements:* " + testRequirements + "<br>

        | *Step* | *Verification* |
        | Launch " + testBinary + " | App launches normally |
        | Press Options button | |
        | Select Geocode menu item | |
        | Press Clear All button | |
        | Fill in " + country_code + " in Country code field | |
        | Press Go! button | |
        | Wait for message appears on the screen | Verify that geocode is successful |"
        ));
    },

    qml_geocode_request_with_post_code_data: {
        request:["4113", "Australia", "http://loc.desktop.maps.svc.ovi.com/geocoder/gc/2.0?referer=qtlocationapi&token=152022572f0e44e07489c35cd46fa246&lg=eng&country=Australia&zip=4113"]
    },

    qml_geocode_request_with_post_code: function(postcode, country, url)
    {
        // Test meta data
        testTitle = "QML: Maps and Navigation - Geocode post code";
        testBinary = "qml_location_mapviewer";
        testSource = "$QTDIR/qtlocation/examples/declarative/mapviewer"
        testGoal = "Verify that location can be geocoded.";
        testPreconditions = "Internet connection is required for this test case. Pass proxy settings to app if needed '--plugin.places.proxy http://172.16.9.165:8080/'";
        testGroups = "BAT, 5.0";
        testRequirements = "MTMW-236: QML Geocoding";

        // Test steps
        prompt(twiki("---+++ " + testTitle + "<br><br>
        *Goal:* " + testGoal + "<br>
        *Pre-Requisites:* " + testPreconditions + "<br>
        *Tested Binary:* " + testBinary + "<br>
        *Requirements:* " + testRequirements + "<br>

        | *Step* | *Verification* |
        | Open " + url + " url in a desktop browser | |
        | Launch " + testBinary + " | App launches normally |
        | Press Options button | |
        | Select Geocode menu item | |
        | Press Clear All button | |
        | Fill in " + postcode + " in Post Code field | |
        | Fill in " + country + " in Country field | |
        | Press Go! button | |
        | Wait for message appears on the screen | Verify that result corresponds to the open web page with latitude and longitude rounded to 4 places |"
        ));
    },

    qml_reverse_geocode_data: {
        australian_place:["-27.575", "153.088", "http://loc.desktop.maps.svc.ovi.com/geocoder/rgc/2.0?referer=qtlocationapi&token=152022572f0e44e07489c35cd46fa246&long=153.088&lat=-27.575&lg=eng"],
        russian_place:["56.3264", "44.0048", "http://loc.desktop.maps.svc.ovi.com/geocoder/rgc/2.0?referer=qtlocationapi&token=152022572f0e44e07489c35cd46fa246&long=44.0048&lat=56.3264&lg=eng"],
        uninhabited_place:["-26.8890", "154.6696", "http://loc.desktop.maps.svc.ovi.com/geocoder/rgc/2.0?referer=qtlocationapi&token=152022572f0e44e07489c35cd46fa246&long=154.6696&lat=-26.889&lg=eng"]
    },

    qml_reverse_geocode: function(latitude, longitude, url)
    {
        // Test meta data
        testTitle = "QML: Maps and Navigation - Reverse geocode";
        testBinary = "qml_location_mapviewer";
        testSource = "$QTDIR/qtlocation/examples/declarative/mapviewer"
        testGoal = "Verify that location can be geocoded.";
        testPreconditions = "Internet connection is required for this test case. Pass proxy settings to app if needed '--plugin.places.proxy http://172.16.9.165:8080/'";
        testGroups = "BAT, 5.0";
        testRequirements = "MTMW-237:QML Reverse geocoding";

        // Test steps
        prompt(twiki("---+++ " + testTitle + "<br><br>
        *Goal:* " + testGoal + "<br>
        *Pre-Requisites:* " + testPreconditions + "<br>
        *Tested Binary:* " + testBinary + "<br>
        *Requirements:* " + testRequirements + "<br>

        | *Step* | *Verification* |
        | Open " + url + " url in a desktop browser | |
        | Launch " + testBinary + " | App launches normally |
        | Press Options button | |
        | Select Reverse Geocode | |
        | Fill in " + latitude + " in Latitude filed | |
        | Fill in " + longitude + " in Longitude field | |
        | Press Go! button | |
        | Wait for message appears on the screen | Verify that result corresponds to the open web page with latitude and longitude rounded to 4 places |"
        ));
    },

/*
    qml_current_position: function()
    {
        // Test meta data
        testTitle = "QML: Maps and Navigation - Current Position";
        testBinary = "qml_location_mapviewer";
        testGoal = "Verify that current position is detected and displayed.";
        testPreconditions = "Internet connection is required for this test case.";
        testGroups = "BAT, 5.0";
        testRequirements = "MOBILITY-2888, MOBILITY-65: Basic Location Functionality ";
    },

    qml_location_is_updated: function()
    {
        // Test meta data
        testTitle = "QML: Maps and Navigation - Current Position";
        testBinary = "qml_location_mapviewer";
        testGoal = "Verify that location data is received and map is updated after changing location.";
        testPreconditions = "Internet connection is required for this test case.";
        testGroups = "BAT, 5.0";
        testRequirements = "MOBILITY-2888, MOBILITY-65: Basic Location Functionality ";
    }

    qml_distance_between_points:function()
    {
        testTitle = "QML: Maps and Navigation - Distance between points";
        testBinary = "qml_location_mapviewer";
        testSource = "$QTDIR/qtlocation/examples/declarative/mapviewer"
        testGoal = "Verify that distance between points can be calculated.";
        testPreconditions = "Internet connection is required for this test case.";
        testGroups = "BAT,5.0";
        testRequirements = "MOBILITY-2861";
    },

    qml_shift_to_the_given_offset:function()
    {
        // Test meta data
        testTitle = "QML: Maps and Navigation - Shift To Given Offset";
        testBinary = "qml_location_mapviewer";
        testGoal = "Verify that coordinates can be calculated as an offset to another position.";
        testPreconditions = "Internet connection is required for this test case.";
        testGroups = "BAT, 5.0";
        testRequirements = "MOBILITY-2861, QTMOBILITY-658: Add a method to QGeoCoordinate which takes an offset and returns another QGeoCoordinate";

        // Test steps
        prompt(twiki("---+++ " + testTitle + "<br><br>
        *Goal:* " + testGoal + "<br>
        *Pre-Requisites:* " + testPreconditions + "<br>
        *Tested Binary:* " + testBinary + "<br>
        *Requirements:* " + testRequirements + "<br>

        | *Step* | *Verification* |
        | Launch " + testBinary + " | App launches normally |
        | Select the MapNavigation | |
        | Fill in <b>0</b> in to Start Latitude field | |
        | Fill in *100* in to Start Longitude field | |
        | Select Distance/Bearing from pre-defined dropdown list | |
        | Fill *1000000, 90* in to the given field | |
        | Press the Ok button | Verify that Destination fields are updated with *5.48417e-16* latitude and *108.9932* longitude |
        | Fill in *60* in to Start Latitude field | |
        | Fill in *100* in to Start Longitude field | |
        | Select Distance/Bearing from pre-defined dropdown list | |
        | Fill *1000000, 180* in to the given field | |
        | Press the Ok button | Verify that Destination fields are updated with *51.0068* latitude and *100* longitude |
        | Fill in *60* in to Start Latitude field | |
        | Fill in *100* in to Start Longitude field | |
        | Select Distance/Bearing from pre-defined dropdown list | |
        | Fill *1000000, 20* in to the given field | |
        | Press the Ok button | Verify that Destination fields are updated with *68.2523* latitude and *108.296* longitude |"
        ));
    },

    qml_polyline_mapitem:function()
    {
        testTitle = "QML: Maps and Navigation - Interaction with mapitems";
        testBinary = "qml_location_mapviewer";
        testSource = "$QTDIR/qtlocation/examples/declarative/mapviewer"
        testGoal = "Verify that polyline can be drawn on map.";
        testPreconditions = "Internet connection is required for this test case.";
        testGroups = "BAT, 5.0";
        testRequirements = "MOBILITY-2861";
    },

    qml_polygon_mapitem:function()
    {
        testTitle = "QML: Maps and Navigation - Interaction with mapitems";
        testBinary = "qml_location_mapviewer";
        testSource = "$QTDIR/qtlocation/examples/declarative/mapviewer"
        testGoal = "Verify that polygon can be drawn on map.";
        testPreconditions = "Internet connection is required for this test case.";
        testGroups = "BAT, 5.0";
        testRequirements = "MOBILITY-2861";
    },

    qml_circle_mapitem:function()
    {
        testTitle = "QML: Maps and Navigation - Interaction with mapitems";
        testBinary = "qml_location_mapviewer";
        testSource = "$QTDIR/qtlocation/examples/declarative/mapviewer"
        testGoal = "Verify that circle can be drawn on map.";
        testPreconditions = "Internet connection is required for this test case.";
        testGroups = "BAT, 5.0";
        testRequirements = "MOBILITY-2861";
    },

    qml_video_mapitem:function()
    {
        testTitle = "QML: Maps and Navigation - Interaction with mapitems";
        testBinary = "qml_location_mapviewer";
        testSource = "$QTDIR/qtlocation/examples/declarative/mapviewer"
        testGoal = "Verify that video can be placed on map.";
        testPreconditions = "Internet connection is required for this test case.";
        testGroups = "BAT, 5.0";
        testRequirements = "MOBILITY-2861";
    },

    qml_image_mapitem:function()
    {
        testTitle = "QML: Maps and Navigation - Interaction with mapitems";
        testBinary = "qml_location_mapviewer";
        testSource = "$QTDIR/qtlocation/examples/declarative/mapviewer"
        testGoal = "Verify that circle can be drawn on map.";
        testPreconditions = "Internet connection is required for this test casei.";
        testGroups = "BAT, 5.0";
        testRequirements = "MOBILITY-2861";
    },

    qml_3dqml_mapitem:function()
    {
        testTitle = "QML: Maps and Navigation - Interaction with mapitems";
        testBinary = "qml_location_mapviewer";
        testSource = "$QTDIR/qtlocation/examples/declarative/mapviewer"
        testGoal = "Verify that 3D QML item can be drawn on map.";
        testPreconditions = "Internet connection is required for this test case.";
        testGroups = "BAT, 5.0";
        testRequirements = "MOBILITY-2861";
    },

    qml_mapitems_zooming: function()
    {
        // Test meta data
        testTitle = "QML: Maps and Navigation - Mapitem object zooming";
        testBinary = "qml_location_mapviewer";
        testSource = "$QTDIR/qtlocation/examples/declarative/mapviewer"
        testGoal = "Verify that pixmap objects are not scaled, verify that vector objects are scaled.";
        testPreconditions = "Internet connection is required for this test case.";
        testGroups = "BAT, 5.0";
        testRequirements = "MOBILITY-2861, QTMOBILITY-757: Be able to prevent a QGeoMapPixmapObject from being scaled when zooming occurs, QTMOBILITY-701: Add a QGraphicsItem based map object.";
    },

    qml_mapitem_interaction:function()
    {
        testTitle = "QML: Maps and Navigation - Interaction with mapitems";
        testBinary = "qml_location_mapviewer";
        testSource = "$QTDIR/qtlocation/examples/declarative/mapviewer"
        testGoal = "Verify that mapitems can handle touch/mouse events.";
        testPreconditions = "Internet connection is required for this test case.";
        testGroups = "BAT, 5.0";
        testRequirements = "MOBILITY-2861";
    },

    qml_border_wrapping_for_map: function()
    {
        // Test meta data
        testTitle = "QML: Maps and Navigation - Border wrapping";
        testBinary = "qml_location_mapviewer";
        testSource = "$QTDIR/qtlocation/examples/declarative/mapviewer"
        testGoal = "Verify that border wrapping works correctly for map and map items.";
        testPreconditions = "Internet connection is required for this test case";
        testGroups = "BAT, 5.0";
        testRequirements = "MOBILITY-2861";
    },

    qml_route_for_two_close_points: function()
    {
        // Test meta data
        testTitle = "QML: Maps and Navigation - Route for two close points";
        testBinary = "qml_location_mapviewer";
        testSource = "$QTDIR/qtlocation/examples/declarative/mapviewer"
        testGoal = "Verify that route can be calculated.";
        testPreconditions = "Internet connection is required for this test case";
        testGroups = "BAT, 5.0";
        testRequirements = "MTMW-235: QML Routing";

        // Test steps
        prompt(twiki("---+++ " + testTitle + "<br><br>
        *Goal:* " + testGoal + "<br>
        *Pre-Requisites:* " + testPreconditions + "<br>
        *Tested Binary:* " + testBinary + "<br>
        *Requirements:* " + testRequirements + "<br>

        | *Step* | *Verification* |
        | Launch " + testBinary + " | App launches normally |
        | Press Options button | |
        | Select Route menu item | |
        | Make sure that coordinates are *(-27.575,153.088)->(-27.465,153.023)* | |
        | Press Go button | |
        | Wait for the route appears on the screen | Verify that the route looks correct and does not have strange loops |
        | Click on the catch on the left side of the screen | Verify that distance is *15.9km* |
        | Click on the catch | |
        | Press Options button | |
        | Select Route menu item | |
        | Select second option group to enter start and end points as address | |
        | Use default addresses and Press Go button | |
        | Wait for the route appears on the screen | Verify that the route looks correct and does not have strange loops |
        | Click on the catch on the left side of the screen | Verify that distance is *19.6km* |"
        ));
    },

    qml_route_for_two_distant_points: function()
    {
        // Test meta data
        testTitle = "QML: Maps and Navigation - Route for two distant points";
        testBinary = "qml_location_mapviewer";
        testSource = "$QTDIR/qtlocation/examples/declarative/mapviewer"
        testGoal = "Verify that route can be calculated.";
        testPreconditions = "internet connection is required for this test case";
        testGroups = "BAT, 5.0";
        testRequirements = "MTMW-235: QML Routing";

        // Test steps
        prompt(twiki("---+++ " + testTitle + "<br><br>
        *Goal:* " + testGoal + "<br>
        *Pre-Requisites:* " + testPreconditions + "<br>
        *Tested Binary:* " + testBinary + "<br>
        *Requirements:* " + testRequirements + "<br>

        | *Step* | *Verification* |
        | Launch " + testBinary + " | App launches normally |
        | Press Options button | |
        | Select Route menu item | |
        | Selec coordinate option group | |
        | Fill in *-27.4709* in From Latitude field | |
        | Fill in *153.0235* in From Longitude filed | |
        | Fill in *-33.8689* in To Latitude field | |
        | Fill in *151.2071* in To Longitude filed | |
        | Press Go button | |
        | Wait for the route appears on the screen | Verify that the route looks correct and does not have strange loops |
        | Click on the catch on the left side of the screen | Verify that distance is *930km* |
        | Click on the catch | |
        | Press Options button | |
        | Select Route menu item | |
        | Selec second option group | |
        | Press Clear button | |
        | Fill in *Eight Mile Plains* in From City field | |
        | Fill in *Australia* in From Country filed | |
        | Fill in *Moscow* in To City filed | |
        | Fill in *Australia* in To Country filed | |
        | Press Go button | |
        | Wait for message appears on the screen | Verify that route is not found |
        | Press Ok button | |
        | Press Options button | |
        | Select Route menu item | |
        | Selec second option group | |
        | Fill in *Byron Bay* in To City filed | |
        | Fill in *Australia* in To Country filed | |
        | Press Go button | |
        | Wait for the route appears on the screen | Verify that the route looks correct and does not have strange loops |
        | Click on the catch on the left side of the screen | Verify that distance is *151km* |"
        ));
    },

    qml_route_for_multiple_points: function()
    {
        // Test meta data
        testTitle = "QML: Maps and Navigation - Route for several waypoints";
        testBinary = "qml_location_mapviewer";
        testSource = "$QTDIR/qtlocation/examples/declarative/mapviewer"
        testGoal = "Verify that route can be calculated.";
        testPreconditions = "internet connection is required for this test case";
        testGroups = "BAT, 5.0";
        testRequirements = "MTMW-235: QML Routing";

        // Test steps
        prompt(twiki("---+++ " + testTitle + "<br><br>
        *Goal:* " + testGoal + "<br>
        *Pre-Requisites:* " + testPreconditions + "<br>
        *Tested Binary:* " + testBinary + "<br>
        *Requirements:* " + testRequirements + "<br>

        | *Step* | *Verification* |
        | Launch " + testBinary + " | App launches normally |
        | Long press on the map | |
        | Press Set Marker menu item | |
        | Create another Marker via Long Press | |
        | Create third Marker | |
        | Long Press on the first marker | |
        | Select Move To menu item | |
        | Fill in *-27.575* in Latitude filed | |
        | Fill in *153.088* in Longitude | |
        | Press Go! button | |
        | Long Press on the second marker | |
        | Select Move To menu item | |
        | Fill in *-27.465* in Latitude filed | |
        | Fill in *153.023* in Longitude | |
        | Press Go! button | |
        | Long Press on the third marker | |
        | Select Move To menu item | |
        | Fill in *-27.3614* in Latitude filed | |
        | Fill in *153.0043* in Longitude | |
        | Press Go! button | |
        | Long Press on the first marker | |
        | Select Route To The Next Points | |
        | Wait for the route appears on the screen | Verify that the route looks correct and does not have strange loops |
        | Click on the catch on the left side of the screen | Verify that distance is *29.5km* |"
        ));
    },

    qml_travel_mode: function()
    {
        // Test meta data
        testTitle = "QML: Maps and Navigation - Travel mode (Car and Pedestrian)";
        testBinary = "qml_location_mapviewer";
        testSource = "$QTDIR/qtlocation/examples/declarative/mapviewer"
        testGoal = "Verify that route can be calculated.";
        testPreconditions = "internet connection is required for this test case";
        testGroups = "BAT, 5.0";
        testRequirements = "MTMW-235: QML Routing";

        // Test steps
        prompt(twiki("---+++ " + testTitle + "<br><br>
        *Goal:* " + testGoal + "<br>
        *Pre-Requisites:* " + testPreconditions + "<br>
        *Tested Binary:* " + testBinary + "<br>
        *Requirements:* " + testRequirements + "<br>

        | *Step* | *Verification* |
        | Launch " + testBinary + " | App launches normally |
        | Press Options button | |
        | Select Route menu item | |
        | Selec first option group | |
        | Fill in *-27.5789* in From Latitude field | |
        | Fill in *153.0919* in From Longitude filed | |
        | Fill in *-27.5792* in To Latitude field | |
        | Fill in *153.096* in To Longitude filed | |
        | Press Go button | |
        | Wait for the route appears on the screen | Verify that the route looks correct and does not have strange loops |
        | Click on the catch on the left side of the screen | Verify that distance is *2.6km* |
        | Click on the catch | |
        | Press Options button | |
        | Select Route menu item | |
        | Select *Pedestrian* option button | |
        | Press Go button | |
        | Wait for the route appears on the screen | Verify that the route looks correct and does not have strange loops |
        | Click on the catch on the left side of the screen | Verify that distance is *1.7km* |"
        ));
    },

    qml_route_feature_type: function()
    {
        // Test meta data
        testTitle = "QML: Maps and Navigation - Route features (Avoid Highways and Avoid Tool Road)";
        testBinary = "qml_location_mapviewer";
        testSource = "$QTDIR/qtlocation/examples/declarative/mapviewer"
        testGoal = "Verify that route can be calculated.";
        testPreconditions = "internet connection is required for this test case";
        testGroups = "BAT, 5.0";
        testRequirements = "MTMW-235: QML Routing";

        // Test steps
        prompt(twiki("---+++ " + testTitle + "<br><br>
        *Goal:* " + testGoal + "<br>
        *Pre-Requisites:* " + testPreconditions + "<br>
        *Tested Binary:* " + testBinary + "<br>
        *Requirements:* " + testRequirements + "<br>

        | *Step* | *Verification* |
        | Launch " + testBinary + " | App launches normally |
        | Press Options button | |
        | Select Route menu item | |
        | Selec first option group | |
        | Fill in *-27.5013* in From Latitude field | |
        | Fill in *153.1002* in From Longitude filed | |
        | Fill in *-27.4395* in To Latitude field | |
        | Fill in *153.0504* in To Longitude filed | |
        | Select *Avoid toll roads* checkbox | |
        | Press Go button | |
        | Wait for the route appears on the screen | Verify that the route looks correct and does not have strange loops |
        | Click on the catch on the left side of the screen | Verify that distance is *18km* |
        | Click on the catch | |
        | Press Options button | |
        | Select *Avoid highways* checkbox | |
        | Press Go button | |
        | Wait for the route appears on the screen | Verify that the route looks correct and does not have strange loops |
        | Click on the catch on the left side of the screen | Verify that distance is *15km* |"
        ));
    },

    qml_route_optimization: function()
    {
        // Test meta data
        testTitle = "QML: Maps and Navigation - Route optimization (Shortest way)";
        testBinary = "qml_location_mapviewer";
        testSource = "$QTDIR/qtlocation/examples/declarative/mapviewer"
        testGoal = "Verify that route can be calculated.";
        testPreconditions = "internet connection is required for this test case";
        testGroups = "BAT, 5.0";
        testRequirements = "MTMW-235: QML Routing";

        // Test steps
        prompt(twiki("---+++ " + testTitle + "<br><br>
        *Goal:* " + testGoal + "<br>
        *Pre-Requisites:* " + testPreconditions + "<br>
        *Tested Binary:* " + testBinary + "<br>
        *Requirements:* " + testRequirements + "<br>

        | *Step* | *Verification* |
        | Launch " + testBinary + " | App launches normally |
        | Press Options button | |
        | Select Route menu item | |
        | Selec first option group | |
        | Fill in *-27.5789* in From Latitude field | |
        | Fill in *153.0919* in From Longitude filed | |
        | Fill in *-27.5792* in To Latitude field | |
        | Fill in *153.096* in To Longitude filed | |
        | Select *Shortest* option button | |
        | Press Go button | |
        | Wait for the route appears on the screen | Verify that the route looks correct and does not have strange loops |
        | Click on the catch on the left side of the screen | Verify that distance is *2.2km* |"
        ));
    },
*/

    qml_searching_for_places_by_category_for_given_position_data: {
        data:["48.9", "2.4", "Shopping", "Pharmacy", "http://where.desktop.mos.svc.ovi.com/NOSe/json?vi=where&dv=oviMaps&lat=48.9&lon=2.4&of=0&dym=5&q=Pharmacy",
              "http://where.desktop.mos.svc.ovi.com/NOSe/json?vi=where&dv=oviMaps&lat=48.9&lon=2.4&of=0&dym=5&q=Shopping"]
    },

    qml_searching_for_places_by_category_for_given_position: function(latitude, longitude, category, subcategory, url1, url2)
    {
        // Test meta data
        testTitle = "QML: Places - Searching by category for the given position";
        testBinary = "qml_location_places";
        testSource = "$QTDIR/qtlocation/examples/declarative/places"
        testGoal = "Verify that places can be found.";
        testPreconditions = "Internet connection is required for this test case. Pass proxy settings to app if needed '--plugin.places.proxy http://172.16.9.165:8080/'";
        testGroups = "BAT,5.0";
        testRequirements = "MTMW-190: Place Discovery";

        // Test steps
        prompt(twiki("---+++ " + testTitle + "<br><br>
        *Goal:* " + testGoal + "<br>
        *Pre-Requisites:* " + testPreconditions + "<br>
        *Tested Binary:* " + testBinary + "<br>
        *Requirements:* " + testRequirements + "<br>

        | *Step* | *Verification* |
        | Open " + url1 + " url in a desktop browser | |
        | Launch " + testBinary + " | App launches normally |
        | Press Provider button | |
        | Select nokia provider | |
        | Press Goto button | |
        | Fill in " + latitude + " in Latitude filed | |
        | Fill in " + longitude + " in Longitude field | |
        | Press Go! button | |
        | Press Categories button | |
        | Press Right arrow next to " + category + " | |
        | Select " + subcategory + " | |
        | Expand panel with seacrh results | Verify that number of found places corresponds to the open web page. Verify that details of the first place is the same. |
        | Hide panel with results | |
        | Open " + url2 + " url in a desktop browser | |
        | Press Categories button | |
        | Press Back button | |
        | Select " + category + " | |
        | Expand panel with seacrh result | Verify that number of found places corresponds to the open web page. Verify that details of the first place is the same. |"
        ));
    },

    qml_searching_for_places_by_text_string_for_given_position_data: {
        search_string:["48.9", "2.4", "pizza", "http://where.desktop.mos.svc.ovi.com/NOSe/json?vi=where&dv=oviMaps&lat=48.9&lon=2.4&of=0&dym=5&q=pizza"],
        search_string_with_typo:["-27.5", "153", "pizzs", "http://where.desktop.mos.svc.ovi.com/NOSe/json?vi=where&dv=oviMaps&lat=-27.5&lon=153&of=0&dym=5&q=pizzs"]
    },

    qml_searching_for_places_by_text_string_for_given_position: function(latitude, longitude, search_string, url)
    {
        // Test meta data
        testTitle = "QML: Places - Searching by text string for the given position";
        testBinary = "qml_location_places";
        testSource = "$QTDIR/qtlocation/examples/declarative/places"
        testGoal = "Verify that places can be found.";
        testPreconditions = "Internet connection is required for this test case. Pass proxy settings to app if needed '--plugin.places.proxy http://172.16.9.165:8080/'";
        testGroups = "BAT,5.0";
        testRequirements = "MTMW-190: Place Discovery";

        // Test steps
        prompt(twiki("---+++ " + testTitle + "<br><br>
        *Goal:* " + testGoal + "<br>
        *Pre-Requisites:* " + testPreconditions + "<br>
        *Tested Binary:* " + testBinary + "<br>
        *Requirements:* " + testRequirements + "<br>

        | *Step* | *Verification* |
        | Open " + url + " url in a desktop browser | |
        | Launch " + testBinary + " | App launches normally |
        | Press Provider button | |
        | Select nokia provider | |
        | Press Goto button | |
        | Fill in " + latitude + " in Latitude filed | |
        | Fill in " + longitude + " in Longitude field | |
        | Press Go! button | |
        | Fill in " + search_string + " | |
        | Press Search button | |
        | Expand panel with results | Verify that number of found places corresponds to the open web page. Verify that details of the first place is the same. |"
        ));
    },

    qml_recomendations_for_places_data: {
        data:["48.9", "2.4", "La Romantica", "La Romantica 6996m", "http://places.maps.ovi.com/rest/v1/places/250u09wh-8412aba7c3f8475da0a7ebc5fa713ec4/recommendations/nearby"]
    },

    qml_recomendations_for_places: function(latitude, longitude, search_string, place, url)
    {
        // Test meta data
        testTitle = "QML: Places - Recommendation for places";
        testBinary = "qml_location_places";
        testSource = "$QTDIR/qtlocation/examples/declarative/places"
        testGoal = "Verify that recomendation for places can be found.";
        testPreconditions = "Internet connection is required for this test case. Pass proxy settings to app if needed '--plugin.places.proxy http://172.16.9.165:8080/'";
        testGroups = "BAT,5.0";
        testRequirements = "MTMW-190: Place Discovery";

        // Test steps
        prompt(twiki("---+++ " + testTitle + "<br><br>
        *Goal:* " + testGoal + "<br>
        *Pre-Requisites:* " + testPreconditions + "<br>
        *Tested Binary:* " + testBinary + "<br>
        *Requirements:* " + testRequirements + "<br>

        | *Step* | *Verification* |
        | Open " + url + " url in a desktop browser | |
        | Launch " + testBinary + " | App launches normally |
        | Press Provider button | |
        | Select nokia provider | |
        | Press Goto button | |
        | Fill in " + latitude + " in Latitude filed | |
        | Fill in " + longitude + " in Longitude field | |
        | Press Go! button | |
        | Fill in " + search_string + " | |
        | Press Search button | |
        | Expand panel with results | |
        | Select " + place + " | |
        | Select “Find Similar” | Verify that number of found places corresponds to the open web page. Verify that distance to reccommended places is the same. |"
        ));
    },

    qml_suggestions_for_places_data: {
        search_string_of_3_symbols:["48.9", "2.4", "piz", "http://where.desktop.mos.svc.ovi.com/NOSe/json?vi=where&dv=oviMaps&lat=48.9&lon=2.4&of=0&q=piz&lh=1"],
        search_string_of_4_symbols:["48.9", "2.4", "pizz", "http://where.desktop.mos.svc.ovi.com/NOSe/json?vi=where&dv=oviMaps&lat=48.9&lon=2.4&of=0&q=pizz&lh=1"]
    },

    qml_suggestions_for_places: function(latitude, longitude, search_string, url)
    {
        // Test meta data
        testTitle = "QML: Places - Suggestions for places";
        testBinary = "qml_location_places";
        testSource = "$QTDIR/qtlocation/examples/declarative/places"
        testGoal = "Verify that suggestions for places can be obtained.";
        testPreconditions = "Internet connection is required for this test case. Pass proxy settings to app if needed '--plugin.places.proxy http://172.16.9.165:8080/'";
        testGroups = "BAT,5.0";
        testRequirements = "MTMW-190: Place Discovery";

        // Test steps
        prompt(twiki("---+++ " + testTitle + "<br><br>
        *Goal:* " + testGoal + "<br>
        *Pre-Requisites:* " + testPreconditions + "<br>
        *Tested Binary:* " + testBinary + "<br>
        *Requirements:* " + testRequirements + "<br>

        | *Step* | *Verification* |
        | Open " + url + " url in a desktop browser | |
        | Launch " + testBinary + " | App launches normally |
        | Press Provider button | |
        | Select nokia provider | |
        | Press Goto button | |
        | Fill in " + latitude + " in Latitude filed | |
        | Fill in " + longitude + " in Longitude field | |
        | Press Go! button | |
        | Fill in " + search_string + " | Verify that list of suggested places corresponds to the open web page. |"
        ));
    },

    qml_place_editorials_data: {
        search_string:["-27.5", "153", "sushi", "Oz Sushi 1865m", "Oz sushi", "http://places.maps.ovi.com/rest/v1/places/036r7hg9-3e09424ccf6246d49ac94c367386376b"]
    },

    qml_place_editorials: function(latitude, longitude, search_string, place, editorial, url)
    {
        // Test meta data
        testTitle = "QML: Places - Retrieval of editorials";
        testBinary = "qml_location_places";
        testSource = "$QTDIR/qtlocation/examples/declarative/places"
        testGoal = "Verify that editorials for places can be obtained.";
        testPreconditions = "Internet connection is required for this test case. Pass proxy settings to app if needed '--plugin.places.proxy http://172.16.9.165:8080/'";
        testGroups = "BAT,5.0";
        testRequirements = "MTMW-191: Place Retrieval";

        // Test steps
        prompt(twiki("---+++ " + testTitle + "<br><br>
        *Goal:* " + testGoal + "<br>
        *Pre-Requisites:* " + testPreconditions + "<br>
        *Tested Binary:* " + testBinary + "<br>
        *Requirements:* " + testRequirements + "<br>

        | *Step* | *Verification* |
        | Open " + url + " url in a desktop browser | |
        | Launch " + testBinary + " | App launches normally |
        | Press Provider button | |
        | Select nokia provider | |
        | Press Goto button | |
        | Fill in " + latitude + " in Latitude filed | |
        | Fill in " + longitude + " in Longitude field | |
        | Press Go! button | |
        | Fill in " + search_string + " | |
        | Press Search button | |
        | Expand panel with results | |
        | Select " + place + " | |
        | Select “Editorials” | |
        | Select " + editorial + " | Verify that text, title and vendor correspond to the 'premiumContent' section of the open web page. |"
        ));
    },

    qml_place_images_data: {
        search_string:["48.9", "2.4", "sushi", "Nakagawa 2838m", "http://places.maps.ovi.com/rest/v1/places/250u09wn-077bc389b68e4642b0dea40dcec9489a/images"]
    },

    qml_place_images: function(latitude, longitude, search_string, place, url)
    {
        // Test meta data
        testTitle = "QML: Places - Retrieval of images";
        testBinary = "qml_location_places";
        testSource = "$QTDIR/qtlocation/examples/declarative/places"
        testGoal = "Verify that editorials for places can be obtained.";
        testPreconditions = "Internet connection is required for this test case. Pass proxy settings to app if needed '--plugin.places.proxy http://172.16.9.165:8080/'";
        testGroups = "BAT,5.0";
        testRequirements = "MTMW-191: Place Retrieval";

        // Test steps
        prompt(twiki("---+++ " + testTitle + "<br><br>
        *Goal:* " + testGoal + "<br>
        *Pre-Requisites:* " + testPreconditions + "<br>
        *Tested Binary:* " + testBinary + "<br>
        *Requirements:* " + testRequirements + "<br>

        | *Step* | *Verification* |
        | Open " + url + " url in a desktop browser | |
        | Launch " + testBinary + " | App launches normally |
        | Press Provider button | |
        | Select nokia provider | |
        | Press Goto button | |
        | Fill in " + latitude + " in Latitude filed | |
        | Fill in " + longitude + " in Longitude field | |
        | Press Go! button | |
        | Fill in " + search_string + " | |
        | Press Search button | |
        | Expand panel with results | |
        | Select " + place + " | |
        | Select “Images” | Verify that images correspond to the open web page. |"
        ));
    },

    qml_place_reviews_data: {
        search_string:["48.9", "2.4", "sushi", "Nakagawa 2838m", "http://places.maps.ovi.com/rest/v1/places/250u09wn-077bc389b68e4642b0dea40dcec9489a/reviews"]
    },

    qml_place_reviews: function(latitude, longitude, search_string, place, url)
    {
        // Test meta data
        testTitle = "QML: Places - Retrieval of reviews";
        testBinary = "qml_location_places";
        testSource = "$QTDIR/qtlocation/examples/declarative/places"
        testGoal = "Verify that editorials for places can be obtained.";
        testPreconditions = "Internet connection is required for this test case. Pass proxy settings to app if needed '--plugin.places.proxy http://172.16.9.165:8080/'";
        testGroups = "BAT,5.0";
        testRequirements = "MTMW-191: Place Retrieval";

        // Test steps
        prompt(twiki("---+++ " + testTitle + "<br><br>
        *Goal:* " + testGoal + "<br>
        *Pre-Requisites:* " + testPreconditions + "<br>
        *Tested Binary:* " + testBinary + "<br>
        *Requirements:* " + testRequirements + "<br>

        | *Step* | *Verification* |
        | Open " + url + " url in a desktop browser | |
        | Launch " + testBinary + " | App launches normally |
        | Press Provider button | |
        | Select nokia provider | |
        | Press Goto button | |
        | Fill in " + latitude + " in Latitude filed | |
        | Fill in " + longitude + " in Longitude field | |
        | Press Go! button | |
        | Fill in " + search_string + " | |
        | Press Search button | |
        | Expand panel with results | |
        | Select " + place + " | |
        | Select “Reviews” | Verify that reviews correspond to the open web page. |"
        ));
    },

    qml_place_retrieval_data: {
        search_string:["-27.5", "153", "sushi", "Oz Sushi 1865m", "http://places.maps.ovi.com/rest/v1/places/036r7hg9-3e09424ccf6246d49ac94c367386376b"]
    },

    qml_place_retrieval: function(latitude, longitude, search_string, place, url)
    {
        // Test meta data
        testTitle = "QML: Places - Retrieval of general data of a place";
        testBinary = "qml_location_places";
        testSource = "$QTDIR/qtlocation/examples/declarative/places"
        testGoal = "Verify that general information about place can be obtained.";
        testPreconditions = "Internet connection is required for this test case. Pass proxy settings to app if needed '--plugin.places.proxy http://172.16.9.165:8080/'";
        testGroups = "BAT,5.0";
        testRequirements = "MTMW-191: Place Retrieval";

        // Test steps
        prompt(twiki("---+++ " + testTitle + "<br><br>
        *Goal:* " + testGoal + "<br>
        *Pre-Requisites:* " + testPreconditions + "<br>
        *Tested Binary:* " + testBinary + "<br>
        *Requirements:* " + testRequirements + "<br>

        | *Step* | *Verification* |
        | Open " + url + " url in a desktop browser | |
        | Launch " + testBinary + " | App launches normally |
        | Press Provider button | |
        | Select nokia provider | |
        | Press Goto button | |
        | Fill in " + latitude + " in Latitude filed | |
        | Fill in " + longitude + " in Longitude field | |
        | Press Go! button | |
        | Fill in " + search_string + " | |
        | Press Search button | |
        | Expand panel with results | |
        | Select " + place + " | Verify that rating, address, category and contact details correspond to the open web page. |"
        ));
    }

    /*
    qml_locale_handling: function()
    {
        // Test meta data
        testTitle = "QML: Places - Locale handling";
        testBinary = "qml_location_places";
        testSource = "$QTDIR/qtlocation/examples/declarative/places"
        testGoal = "Verify that places can be found for different locale.";
        testPreconditions = "Internet connection is required for this test case. Pass proxy settings to app if needed '--plugin.places.proxy http://172.16.9.165:8080/'";
        testGroups = "BAT,5.0";
        testRequirements = "MTMW-191: Place Retrieval";
    },

    qml_searching_for_places_by_category_inside_bounding_box: function()
    {
        // Test meta data
        testTitle = "QML: Places - Searching by category inside bounding box";
        testBinary = "qml_location_places";
        testSource = "$QTDIR/qtlocation/examples/declarative/places"
        testGoal = "Verify that places can be found.";
        testPreconditions = "Internet connection is required for this test case. Pass proxy settings to app if needed '--plugin.places.proxy http://172.16.9.165:8080/'";
        testGroups = "BAT,5.0";
        testRequirements = "MTMW-190: Place Discovery";
    },

    qml_searching_for_places_by_text_string_inside_bounding_box: function()
    {
        // Test meta data
        testTitle = "QML: Places - Searching by text string inside bounding box";
        testBinary = "qml_location_places";
        testSource = "$QTDIR/qtlocation/examples/declarative/places"
        testGoal = "Verify that places can be found.";
        testPreconditions = "Internet connection is required for this test case. Pass proxy settings to app if needed '--plugin.places.proxy http://172.16.9.165:8080/'";
        testGroups = "BAT,5.0";
        testRequirements = "MTMW-190: Place Discovery";
    }
*/
}  // end of testcase
